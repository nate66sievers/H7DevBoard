
DemoBootLoad_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bec  08004bec  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf4  08004bf4  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf8  08004bf8  00005bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  24000000  08004bfc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  24000018  08004c14  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00007000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebd3  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdf  00000000  00000000  00014c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000168f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000918  00000000  00000000  000174d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003054f  00000000  00000000  00017de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb0b  00000000  00000000  00048337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013481d  00000000  00000000  00056e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b65f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  0018b6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000018 	.word	0x24000018
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004ba4 	.word	0x08004ba4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400001c 	.word	0x2400001c
 80002ec:	08004ba4 	.word	0x08004ba4

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e4:	f000 fb7a 	bl	8000cdc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 feb3 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f868 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fade 	bl	8000bb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fa44 	bl	8000a80 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005f8:	f000 f8c6 	bl	8000788 <MX_UART4_Init>
  MX_UART5_Init();
 80005fc:	f000 f910 	bl	8000820 <MX_UART5_Init>
  MX_UART7_Init();
 8000600:	f000 f95a 	bl	80008b8 <MX_UART7_Init>
  MX_UART8_Init();
 8000604:	f000 f9a4 	bl	8000950 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f9ee 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800060c:	f000 fa84 	bl	8000b18 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myCounter++;
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <main+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a25      	ldr	r2, [pc, #148]	@ (80006ac <main+0xcc>)
 8000618:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	4824      	ldr	r0, [pc, #144]	@ (80006b0 <main+0xd0>)
 8000620:	f001 f9f0 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	@ 0x64
 8000626:	f000 ff09 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2120      	movs	r1, #32
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <main+0xd0>)
 8000630:	f001 f9e8 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	@ 0x64
 8000636:	f000 ff01 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_2, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2104      	movs	r1, #4
 800063e:	481d      	ldr	r0, [pc, #116]	@ (80006b4 <main+0xd4>)
 8000640:	f001 f9e0 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000644:	2064      	movs	r0, #100	@ 0x64
 8000646:	f000 fef9 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2108      	movs	r1, #8
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <main+0xd4>)
 8000650:	f001 f9d8 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000654:	2064      	movs	r0, #100	@ 0x64
 8000656:	f000 fef1 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	2102      	movs	r1, #2
 800065e:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <main+0xd0>)
 8000660:	f001 f9d0 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	@ 0x64
 8000666:	f000 fee9 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_5, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <main+0xd0>)
 8000670:	f001 f9c8 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f000 fee1 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_2, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <main+0xd4>)
 8000680:	f001 f9c0 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f000 fed9 	bl	800143c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2108      	movs	r1, #8
 800068e:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <main+0xd4>)
 8000690:	f001 f9b8 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	@ 0x64
 8000696:	f000 fed1 	bl	800143c <HAL_Delay>
	  HAL_UART_Transmit(&huart7, tx_buff, 10, 1000);
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	220a      	movs	r2, #10
 80006a0:	4905      	ldr	r1, [pc, #20]	@ (80006b8 <main+0xd8>)
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <main+0xdc>)
 80006a4:	f003 fb0a 	bl	8003cbc <HAL_UART_Transmit>
	  myCounter++;
 80006a8:	bf00      	nop
 80006aa:	e7b1      	b.n	8000610 <main+0x30>
 80006ac:	24000440 	.word	0x24000440
 80006b0:	58023800 	.word	0x58023800
 80006b4:	58023000 	.word	0x58023000
 80006b8:	24000000 	.word	0x24000000
 80006bc:	2400015c 	.word	0x2400015c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b0      	sub	sp, #192	@ 0xc0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	229c      	movs	r2, #156	@ 0x9c
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fa3c 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fa36 	bl	8004b4c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006e0:	2001      	movs	r0, #1
 80006e2:	f001 f9f9 	bl	8001ad8 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x30>
  {
    Error_Handler();
 80006ec:	f000 fb22 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 37;
 800070c:	2325      	movs	r3, #37	@ 0x25
 800070e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 4096;
 8000724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000728:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
 800072a:	2300      	movs	r3, #0
 800072c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fa29 	bl	8001b90 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000744:	f000 faf6 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	233f      	movs	r3, #63	@ 0x3f
 800074a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000754:	2308      	movs	r3, #8
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000758:	2304      	movs	r3, #4
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800075c:	2340      	movs	r3, #64	@ 0x40
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000764:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 8000766:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800076a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2136      	movs	r1, #54	@ 0x36
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fd47 	bl	8002204 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fada 	bl	8000d34 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	37c0      	adds	r7, #192	@ 0xc0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_UART4_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	@ (800081c <MX_UART4_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_UART4_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_UART4_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_UART4_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_UART4_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_UART4_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_UART4_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_UART4_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_UART4_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_UART4_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_UART4_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_UART4_Init+0x90>)
 80007d2:	f003 fa23 	bl	8003c1c <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 faaa 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_UART4_Init+0x90>)
 80007e4:	f004 f8e7 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 faa1 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	@ (8000818 <MX_UART4_Init+0x90>)
 80007f6:	f004 f91c 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 fa98 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_UART4_Init+0x90>)
 8000806:	f004 f89d 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 fa90 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	24000034 	.word	0x24000034
 800081c:	40004c00 	.word	0x40004c00

08000820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <MX_UART5_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_UART5_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_UART5_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_UART5_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_UART5_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_UART5_Init+0x90>)
 800086a:	f003 f9d7 	bl	8003c1c <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 fa5e 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_UART5_Init+0x90>)
 800087c:	f004 f89b 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 fa55 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <MX_UART5_Init+0x90>)
 800088e:	f004 f8d0 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 fa4c 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_UART5_Init+0x90>)
 800089e:	f004 f851 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 fa44 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	240000c8 	.word	0x240000c8
 80008b4:	40005000 	.word	0x40005000

080008b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <MX_UART7_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	@ (800094c <MX_UART7_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_UART7_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_UART7_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_UART7_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_UART7_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_UART7_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_UART7_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_UART7_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_UART7_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_UART7_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_UART7_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_UART7_Init+0x90>)
 8000902:	f003 f98b 	bl	8003c1c <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 fa12 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_UART7_Init+0x90>)
 8000914:	f004 f84f 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 fa09 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	@ (8000948 <MX_UART7_Init+0x90>)
 8000926:	f004 f884 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 fa00 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_UART7_Init+0x90>)
 8000936:	f004 f805 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f9f8 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2400015c 	.word	0x2400015c
 800094c:	40007800 	.word	0x40007800

08000950 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000954:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <MX_UART8_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_UART8_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_UART8_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_UART8_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_UART8_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_UART8_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_UART8_Init+0x90>)
 800099a:	f003 f93f 	bl	8003c1c <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f9c6 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_UART8_Init+0x90>)
 80009ac:	f004 f803 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f9bd 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <MX_UART8_Init+0x90>)
 80009be:	f004 f838 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f9b4 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_UART8_Init+0x90>)
 80009ce:	f003 ffb9 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f9ac 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240001f0 	.word	0x240001f0
 80009e4:	40007c00 	.word	0x40007c00

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	@ (8000a7c <MX_USART1_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a32:	f003 f8f3 	bl	8003c1c <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f97a 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a44:	f003 ffb7 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f971 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a56:	f003 ffec 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f968 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a66:	f003 ff6d 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f960 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24000284 	.word	0x24000284
 8000a7c:	42001000 	.word	0x42001000

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	@ (8000b14 <MX_USART2_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000aca:	f003 f8a7 	bl	8003c1c <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f92e 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000adc:	f003 ff6b 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f925 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000aee:	f003 ffa0 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f91c 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <MX_USART2_UART_Init+0x90>)
 8000afe:	f003 ff21 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f914 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	24000318 	.word	0x24000318
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <MX_USART3_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b62:	f003 f85b 	bl	8003c1c <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 f8e2 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f003 ff1f 	bl	80049b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 f8d9 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b86:	f003 ff54 	bl	8004a32 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 f8d0 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b96:	f003 fed5 	bl	8004944 <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 f8c8 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	240003ac 	.word	0x240003ac
 8000bac:	40004800 	.word	0x40004800

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bcc:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOM_CLK_ENABLE();
 8000be0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000be2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be6:	4a3a      	ldr	r2, [pc, #232]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bf0:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c00:	4a33      	ldr	r2, [pc, #204]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c0a:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c24:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4e:	4a20      	ldr	r2, [pc, #128]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOO_CLK_ENABLE();
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c68:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_GPIO_Init+0x120>)
 8000c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3|GPIO_PIN_2, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	210c      	movs	r1, #12
 8000c80:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <MX_GPIO_Init+0x124>)
 8000c82:	f000 febf 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2122      	movs	r1, #34	@ 0x22
 8000c8a:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <MX_GPIO_Init+0x128>)
 8000c8c:	f000 feba 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM3 PM2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000c90:	230c      	movs	r3, #12
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOM, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <MX_GPIO_Init+0x124>)
 8000ca8:	f000 fd56 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PO1 PO5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000cac:	2322      	movs	r3, #34	@ 0x22
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_GPIO_Init+0x128>)
 8000cc4:	f000 fd48 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3730      	adds	r7, #48	@ 0x30
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58023000 	.word	0x58023000
 8000cd8:	58023800 	.word	0x58023800

08000cdc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cee:	f000 fccf 	bl	8001690 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cfe:	231f      	movs	r3, #31
 8000d00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d02:	2387      	movs	r3, #135	@ 0x87
 8000d04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d12:	2301      	movs	r3, #1
 8000d14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fcd3 	bl	80016cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d26:	2004      	movs	r0, #4
 8000d28:	f000 fc90 	bl	800164c <HAL_MPU_Enable>

}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY) != HAL_OK)
 8000d44:	2004      	movs	r0, #4
 8000d46:	f000 fe75 	bl	8001a34 <HAL_PWREx_ConfigSupply>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_MspInit+0x14>
  {
    /* Initialization error */
    Error_Handler();
 8000d50:	f7ff fff0 	bl	8000d34 <Error_Handler>
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Enable the XSPIM_P1 interface */
  HAL_PWREx_EnableXSPIM1();
 8000d54:	f000 ff0c 	bl	8001b70 <HAL_PWREx_EnableXSPIM1>

  /* Enable USB Voltage detector */
  if(HAL_PWREx_EnableUSBVoltageDetector() != HAL_OK)
 8000d58:	f000 fee6 	bl	8001b28 <HAL_PWREx_EnableUSBVoltageDetector>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_MspInit+0x26>
  {
   /* Initialization error */
   Error_Handler();
 8000d62:	f7ff ffe7 	bl	8000d34 <Error_Handler>
  }

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d88:	2284      	movs	r2, #132	@ 0x84
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fedd 	bl	8004b4c <memset>
  if(huart->Instance==UART4)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4abd      	ldr	r2, [pc, #756]	@ (800108c <HAL_UART_MspInit+0x320>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d162      	bne.n	8000e62 <HAL_UART_MspInit+0xf6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8000d9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000da0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f831 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000db8:	f7ff ffbc 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dbc:	4bb4      	ldr	r3, [pc, #720]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000dbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dc2:	4ab3      	ldr	r2, [pc, #716]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000dc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dc8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000dce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4bae      	ldr	r3, [pc, #696]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ddc:	4aac      	ldr	r2, [pc, #688]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000de6:	4baa      	ldr	r3, [pc, #680]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4ba7      	ldr	r3, [pc, #668]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000df2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df6:	4aa6      	ldr	r2, [pc, #664]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e00:	4ba3      	ldr	r3, [pc, #652]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000e02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e24:	2308      	movs	r3, #8
 8000e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4898      	ldr	r0, [pc, #608]	@ (8001094 <HAL_UART_MspInit+0x328>)
 8000e32:	f000 fc91 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	488f      	ldr	r0, [pc, #572]	@ (8001098 <HAL_UART_MspInit+0x32c>)
 8000e5c:	f000 fc7c 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e60:	e1f6      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
  else if(huart->Instance==UART5)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a8d      	ldr	r2, [pc, #564]	@ (800109c <HAL_UART_MspInit+0x330>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d161      	bne.n	8000f30 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8000e6c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e70:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 ffc9 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x120>
      Error_Handler();
 8000e88:	f7ff ff54 	bl	8000d34 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e8c:	4b80      	ldr	r3, [pc, #512]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000e8e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e92:	4a7f      	ldr	r2, [pc, #508]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000e94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e98:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000e9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eac:	4a78      	ldr	r2, [pc, #480]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eb6:	4b76      	ldr	r3, [pc, #472]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b73      	ldr	r3, [pc, #460]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec6:	4a72      	ldr	r2, [pc, #456]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4866      	ldr	r0, [pc, #408]	@ (8001098 <HAL_UART_MspInit+0x32c>)
 8000f00:	f000 fc2a 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f26:	4619      	mov	r1, r3
 8000f28:	485a      	ldr	r0, [pc, #360]	@ (8001094 <HAL_UART_MspInit+0x328>)
 8000f2a:	f000 fc15 	bl	8001758 <HAL_GPIO_Init>
}
 8000f2e:	e18f      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
  else if(huart->Instance==UART7)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a5a      	ldr	r2, [pc, #360]	@ (80010a0 <HAL_UART_MspInit+0x334>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d162      	bne.n	8001000 <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8000f3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f3e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 ff62 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8000f56:	f7ff feed 	bl	8000d34 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f60:	4a4b      	ldr	r2, [pc, #300]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f66:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f6a:	4b49      	ldr	r3, [pc, #292]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOM_CLK_ENABLE();
 8000f74:	4b46      	ldr	r3, [pc, #280]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7a:	4a45      	ldr	r2, [pc, #276]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f84:	4b42      	ldr	r3, [pc, #264]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f94:	4a3e      	ldr	r2, [pc, #248]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8000fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOM, &GPIO_InitStruct);
 8000fc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4835      	ldr	r0, [pc, #212]	@ (80010a4 <HAL_UART_MspInit+0x338>)
 8000fd0:	f000 fbc2 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000fec:	230b      	movs	r3, #11
 8000fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4826      	ldr	r0, [pc, #152]	@ (8001094 <HAL_UART_MspInit+0x328>)
 8000ffa:	f000 fbad 	bl	8001758 <HAL_GPIO_Init>
}
 8000ffe:	e127      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
  else if(huart->Instance==UART8)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <HAL_UART_MspInit+0x33c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d152      	bne.n	80010b0 <HAL_UART_MspInit+0x344>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800100a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fefa 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0x2be>
      Error_Handler();
 8001026:	f7ff fe85 	bl	8000d34 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_UART_MspInit+0x324>)
 800102c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001030:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8001032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001036:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_UART_MspInit+0x324>)
 800103c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800104a:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <HAL_UART_MspInit+0x324>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_UART_MspInit+0x324>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001076:	2308      	movs	r3, #8
 8001078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001080:	4619      	mov	r1, r3
 8001082:	480a      	ldr	r0, [pc, #40]	@ (80010ac <HAL_UART_MspInit+0x340>)
 8001084:	f000 fb68 	bl	8001758 <HAL_GPIO_Init>
}
 8001088:	e0e2      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
 800108a:	bf00      	nop
 800108c:	40004c00 	.word	0x40004c00
 8001090:	58024400 	.word	0x58024400
 8001094:	58020400 	.word	0x58020400
 8001098:	58020c00 	.word	0x58020c00
 800109c:	40005000 	.word	0x40005000
 80010a0:	40007800 	.word	0x40007800
 80010a4:	58023000 	.word	0x58023000
 80010a8:	40007c00 	.word	0x40007c00
 80010ac:	58021000 	.word	0x58021000
  else if(huart->Instance==USART1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a68      	ldr	r2, [pc, #416]	@ (8001258 <HAL_UART_MspInit+0x4ec>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d140      	bne.n	800113c <HAL_UART_MspInit+0x3d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010be:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fea2 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x36e>
      Error_Handler();
 80010d6:	f7ff fe2d 	bl	8000d34 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010da:	4b60      	ldr	r3, [pc, #384]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80010dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010e0:	4a5e      	ldr	r2, [pc, #376]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80010ea:	4b5c      	ldr	r3, [pc, #368]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80010ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010f0:	623b      	str	r3, [r7, #32]
 80010f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b59      	ldr	r3, [pc, #356]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80010f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010fa:	4a58      	ldr	r2, [pc, #352]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001104:	4b55      	ldr	r3, [pc, #340]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001106:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800110e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001128:	2307      	movs	r3, #7
 800112a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001132:	4619      	mov	r1, r3
 8001134:	484a      	ldr	r0, [pc, #296]	@ (8001260 <HAL_UART_MspInit+0x4f4>)
 8001136:	f000 fb0f 	bl	8001758 <HAL_GPIO_Init>
}
 800113a:	e089      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
  else if(huart->Instance==USART2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a48      	ldr	r2, [pc, #288]	@ (8001264 <HAL_UART_MspInit+0x4f8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d13f      	bne.n	80011c6 <HAL_UART_MspInit+0x45a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001146:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800114a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fe5c 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_UART_MspInit+0x3fa>
      Error_Handler();
 8001162:	f7ff fde7 	bl	8000d34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	4b3d      	ldr	r3, [pc, #244]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001168:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800116c:	4a3b      	ldr	r2, [pc, #236]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001172:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001176:	4b39      	ldr	r3, [pc, #228]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001178:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b36      	ldr	r3, [pc, #216]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001182:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001186:	4a35      	ldr	r2, [pc, #212]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001192:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800119a:	2360      	movs	r3, #96	@ 0x60
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b2:	2307      	movs	r3, #7
 80011b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011bc:	4619      	mov	r1, r3
 80011be:	482a      	ldr	r0, [pc, #168]	@ (8001268 <HAL_UART_MspInit+0x4fc>)
 80011c0:	f000 faca 	bl	8001758 <HAL_GPIO_Init>
}
 80011c4:	e044      	b.n	8001250 <HAL_UART_MspInit+0x4e4>
  else if(huart->Instance==USART3)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a28      	ldr	r2, [pc, #160]	@ (800126c <HAL_UART_MspInit+0x500>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d13f      	bne.n	8001250 <HAL_UART_MspInit+0x4e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80011d0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fe17 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x484>
      Error_Handler();
 80011ec:	f7ff fda2 	bl	8000d34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80011f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001202:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 800120c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001210:	4a12      	ldr	r2, [pc, #72]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_UART_MspInit+0x4f0>)
 800121c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001224:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001228:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123e:	2307      	movs	r3, #7
 8001240:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	@ (8001270 <HAL_UART_MspInit+0x504>)
 800124c:	f000 fa84 	bl	8001758 <HAL_GPIO_Init>
}
 8001250:	bf00      	nop
 8001252:	37e8      	adds	r7, #232	@ 0xe8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	42001000 	.word	0x42001000
 800125c:	58024400 	.word	0x58024400
 8001260:	58020000 	.word	0x58020000
 8001264:	40004400 	.word	0x40004400
 8001268:	58020c00 	.word	0x58020c00
 800126c:	40004800 	.word	0x40004800
 8001270:	58020800 	.word	0x58020800

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 f897 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <SystemInit+0x24>)
 80012da:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <SystemInit+0x28>)
 80012dc:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x24>)
 80012e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <SystemInit+0x24>)
 80012e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	08000000 	.word	0x08000000

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	@ (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001304:	f7ff ffe6 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	@ (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	@ (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fc15 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff f955 	bl	80005e0 <main>

08001336 <LoopForever>:

LoopForever:
  b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800133c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001340:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001344:	08004bfc 	.word	0x08004bfc
  ldr r2, =_sbss
 8001348:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800134c:	24000448 	.word	0x24000448

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f943 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fce4 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_InitTick+0x70>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f93f 	bl	8001632 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d809      	bhi.n	80013d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f919 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_InitTick+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000014 	.word	0x24000014
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	24000010 	.word	0x24000010

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	24000014 	.word	0x24000014
 8001420:	24000444 	.word	0x24000444

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	24000444 	.word	0x24000444

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000014 	.word	0x24000014

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	05fa0000 	.word	0x05fa0000

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	@ (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	@ (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff47 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff5e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff90 	bl	800153c <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5f 	bl	80014e8 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffb2 	bl	80015a4 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001654:	f3bf 8f5f 	dmb	sy
}
 8001658:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 800165a:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_MPU_Enable+0x3c>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_MPU_Enable+0x40>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_MPU_Enable+0x40>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001670:	f3bf 8f4f 	dsb	sy
}
 8001674:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001676:	f3bf 8f6f 	isb	sy
}
 800167a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed90 	.word	0xe000ed90
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001694:	f3bf 8f5f 	dmb	sy
}
 8001698:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_MPU_Disable+0x34>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <HAL_MPU_Disable+0x34>)
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_MPU_Disable+0x38>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80016ac:	f3bf 8f4f 	dsb	sy
}
 80016b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b2:	f3bf 8f6f 	isb	sy
}
 80016b6:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	e000ed90 	.word	0xe000ed90

080016cc <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	785a      	ldrb	r2, [r3, #1]
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016da:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7b1b      	ldrb	r3, [r3, #12]
 8001700:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7adb      	ldrb	r3, [r3, #11]
 8001706:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001708:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7a9b      	ldrb	r3, [r3, #10]
 800170e:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001710:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7b5b      	ldrb	r3, [r3, #13]
 8001716:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8001718:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7b9b      	ldrb	r3, [r3, #14]
 800171e:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001720:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7bdb      	ldrb	r3, [r3, #15]
 8001726:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8001728:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7a5b      	ldrb	r3, [r3, #9]
 800172e:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001730:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7a1b      	ldrb	r3, [r3, #8]
 8001736:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8001738:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001742:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001744:	6113      	str	r3, [r2, #16]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed90 	.word	0xe000ed90

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e139      	b.n	80019dc <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 812b 	beq.w	80019d6 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d005      	beq.n	8001798 <HAL_GPIO_Init+0x40>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d017      	beq.n	8001836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d123      	bne.n	800188a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0203 	and.w	r2, r3, #3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8085 	beq.w	80019d6 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80018cc:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_GPIO_Init+0x2a4>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	334c      	adds	r3, #76	@ 0x4c
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0a9a      	lsrs	r2, r3, #10
 80018f4:	4b42      	ldr	r3, [pc, #264]	@ (8001a00 <HAL_GPIO_Init+0x2a8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001908:	493c      	ldr	r1, [pc, #240]	@ (80019fc <HAL_GPIO_Init+0x2a4>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	334c      	adds	r3, #76	@ 0x4c
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800193c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f aebe 	bne.w	8001768 <HAL_GPIO_Init+0x10>
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	58000400 	.word	0x58000400
 8001a00:	0029ff7f 	.word	0x0029ff7f

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d00a      	beq.n	8001a5e <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e038      	b.n	8001acc <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e036      	b.n	8001acc <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f023 021f 	bic.w	r2, r3, #31
 8001a66:	491b      	ldr	r1, [pc, #108]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff fcd9 	bl	8001424 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001a74:	e009      	b.n	8001a8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a76:	f7ff fcd5 	bl	8001424 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a84:	d901      	bls.n	8001a8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e020      	b.n	8001acc <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ef      	beq.n	8001a76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b1e      	cmp	r3, #30
 8001a9a:	d002      	beq.n	8001aa2 <HAL_PWREx_ConfigSupply+0x6e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b1d      	cmp	r3, #29
 8001aa0:	d113      	bne.n	8001aca <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 8001aa2:	f7ff fcbf 	bl	8001424 <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001aa8:	e009      	b.n	8001abe <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001aaa:	f7ff fcbb 	bl	8001424 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ab8:	d901      	bls.n	8001abe <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e006      	b.n	8001acc <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0ef      	beq.n	8001aaa <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58024800 	.word	0x58024800

08001ad8 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f023 0201 	bic.w	r2, r3, #1
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af0:	f7ff fc98 	bl	8001424 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001af6:	e009      	b.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001af8:	f7ff fc94 	bl	8001424 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b06:	d901      	bls.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e006      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ef      	beq.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	58024800 	.word	0x58024800

08001b28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB voltage detector */
  SET_BIT(PWR->CSR2, PWR_CSR2_USB33DEN);
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001b34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b38:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3a:	f7ff fc73 	bl	8001424 <HAL_GetTick>
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001b40:	e009      	b.n	8001b56 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b42:	f7ff fc6f 	bl	8001424 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b50:	d901      	bls.n	8001b56 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e006      	b.n	8001b64 <HAL_PWREx_EnableUSBVoltageDetector+0x3c>
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ef      	beq.n	8001b42 <HAL_PWREx_EnableUSBVoltageDetector+0x1a>
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024800 	.word	0x58024800

08001b70 <HAL_PWREx_EnableXSPIM1>:
  * @note   The XSPIM_P1 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM1(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM1);
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_PWREx_EnableXSPIM1+0x1c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <HAL_PWREx_EnableXSPIM1+0x1c>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	58024800 	.word	0x58024800

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e328      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	4b97      	ldr	r3, [pc, #604]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001baa:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	4b94      	ldr	r3, [pc, #592]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 8001bb6:	4b92      	ldr	r3, [pc, #584]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8001bbe:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 809c 	beq.w	8001d06 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x50>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 808e 	bne.w	8001d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e302      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x76>
 8001bf8:	4b81      	ldr	r3, [pc, #516]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a80      	ldr	r2, [pc, #512]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e058      	b.n	8001cb8 <HAL_RCC_OscConfig+0x128>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0xa4>
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7b      	ldr	r2, [pc, #492]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a78      	ldr	r2, [pc, #480]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e041      	b.n	8001cb8 <HAL_RCC_OscConfig+0x128>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6f      	ldr	r2, [pc, #444]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c50:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a69      	ldr	r2, [pc, #420]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e029      	b.n	8001cb8 <HAL_RCC_OscConfig+0x128>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001c6c:	d112      	bne.n	8001c94 <HAL_RCC_OscConfig+0x104>
 8001c6e:	4b64      	ldr	r3, [pc, #400]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a63      	ldr	r2, [pc, #396]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b61      	ldr	r3, [pc, #388]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a60      	ldr	r2, [pc, #384]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b5e      	ldr	r3, [pc, #376]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e011      	b.n	8001cb8 <HAL_RCC_OscConfig+0x128>
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a56      	ldr	r2, [pc, #344]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b54      	ldr	r3, [pc, #336]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fbb4 	bl	8001424 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fbac 	bl	8001424 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e28c      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b49      	ldr	r3, [pc, #292]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x138>
 8001ce6:	e00e      	b.n	8001d06 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb9c 	bl	8001424 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e27c      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 809e 	beq.w	8001e50 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x196>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d047      	beq.n	8001db0 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d144      	bne.n	8001db0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e260      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0318 	and.w	r3, r3, #24
 8001d3a:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1c6>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e24e      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0219 	bic.w	r2, r3, #25
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	08db      	lsrs	r3, r3, #3
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	4a21      	ldr	r2, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a21      	ldr	r2, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001d84:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fafa 	bl	8001384 <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e22c      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	4915      	ldr	r1, [pc, #84]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
 8001dae:	e04f      	b.n	8001e50 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d032      	beq.n	8001e1e <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 0219 	bic.w	r2, r3, #25
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	490d      	ldr	r1, [pc, #52]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb1e 	bl	8001424 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dea:	e011      	b.n	8001e10 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb1a 	bl	8001424 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d90a      	bls.n	8001e10 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1fa      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
 8001e04:	03d09000 	.word	0x03d09000
 8001e08:	2400000c 	.word	0x2400000c
 8001e0c:	24000010 	.word	0x24000010
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	4b95      	ldr	r3, [pc, #596]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0e7      	beq.n	8001dec <HAL_RCC_OscConfig+0x25c>
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a91      	ldr	r2, [pc, #580]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fafb 	bl	8001424 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e32:	f7ff faf7 	bl	8001424 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1d7      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	4b88      	ldr	r3, [pc, #544]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d045      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2de>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d138      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1bc      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e82:	4b79      	ldr	r3, [pc, #484]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a78      	ldr	r2, [pc, #480]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fac9 	bl	8001424 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e96:	f7ff fac5 	bl	8001424 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1a5      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x306>
 8001eb4:	e018      	b.n	8001ee8 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6b      	ldr	r2, [pc, #428]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001ebc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff faaf 	bl	8001424 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001eca:	f7ff faab 	bl	8001424 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e18b      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001edc:	4b62      	ldr	r3, [pc, #392]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d036      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efc:	4b5a      	ldr	r3, [pc, #360]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f00:	4a59      	ldr	r2, [pc, #356]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fa8c 	bl	8001424 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fa88 	bl	8001424 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e168      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x380>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f34:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fa72 	bl	8001424 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fa6e 	bl	8001424 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e14e      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d019      	beq.n	8001faa <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f76:	4b3c      	ldr	r3, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fa4f 	bl	8001424 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001f8a:	f7ff fa4b 	bl	8001424 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e12b      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f9c:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3fa>
 8001fa8:	e018      	b.n	8001fdc <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2e      	ldr	r2, [pc, #184]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fa35 	bl	8001424 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001fbe:	f7ff fa31 	bl	8001424 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e111      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 809b 	beq.w	8002120 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_RCC_OscConfig+0x4dc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x47c>
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	@ 0x70
 800200a:	e05a      	b.n	80020c2 <HAL_RCC_OscConfig+0x532>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0x4aa>
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a10      	ldr	r2, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	e043      	b.n	80020c2 <HAL_RCC_OscConfig+0x532>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x4e0>
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a02      	ldr	r2, [pc, #8]	@ (8002068 <HAL_RCC_OscConfig+0x4d8>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	e02c      	b.n	80020c2 <HAL_RCC_OscConfig+0x532>
 8002068:	58024400 	.word	0x58024400
 800206c:	58024800 	.word	0x58024800
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b85      	cmp	r3, #133	@ 0x85
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x50e>
 8002078:	4b60      	ldr	r3, [pc, #384]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a5f      	ldr	r2, [pc, #380]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a5c      	ldr	r2, [pc, #368]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 800208a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002090:	4b5a      	ldr	r3, [pc, #360]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002094:	4a59      	ldr	r2, [pc, #356]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	@ 0x70
 800209c:	e011      	b.n	80020c2 <HAL_RCC_OscConfig+0x532>
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	4a56      	ldr	r2, [pc, #344]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a53      	ldr	r2, [pc, #332]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	4a50      	ldr	r2, [pc, #320]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff f9ab 	bl	8001424 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff f9a7 	bl	8001424 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e085      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ee      	beq.n	80020d2 <HAL_RCC_OscConfig+0x542>
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff f995 	bl	8001424 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff f991 	bl	8001424 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e06f      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002114:	4b39      	ldr	r3, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ee      	bne.n	80020fe <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d042      	beq.n	80021ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b18      	cmp	r3, #24
 800212c:	d131      	bne.n	8002192 <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e05c      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 800213a:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002144:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d02e      	beq.n	80021ae <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	4a29      	ldr	r2, [pc, #164]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800215c:	f7ff f962 	bl	8001424 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002162:	bf00      	nop
 8002164:	f7ff f95e 	bl	8001424 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4293      	cmp	r3, r2
 800216e:	d0f9      	beq.n	8002164 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_OscConfig+0x670>)
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	491f      	ldr	r1, [pc, #124]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_RCC_OscConfig+0x66c>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002190:	e00d      	b.n	80021ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3324      	adds	r3, #36	@ 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 fbd6 	bl	8002950 <RCC_PLL_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e022      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	334c      	adds	r3, #76	@ 0x4c
 80021ba:	4619      	mov	r1, r3
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 fbc7 	bl	8002950 <RCC_PLL_Config>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e013      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3374      	adds	r3, #116	@ 0x74
 80021e0:	4619      	mov	r1, r3
 80021e2:	2002      	movs	r0, #2
 80021e4:	f000 fbb4 	bl	8002950 <RCC_PLL_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58024400 	.word	0x58024400
 8002200:	ffff0007 	.word	0xffff0007

08002204 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e182      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b8a      	ldr	r3, [pc, #552]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b87      	ldr	r3, [pc, #540]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800222e:	4985      	ldr	r1, [pc, #532]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b83      	ldr	r3, [pc, #524]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e16a      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d010      	beq.n	8002276 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	4b7b      	ldr	r3, [pc, #492]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	429a      	cmp	r2, r3
 8002262:	d908      	bls.n	8002276 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002264:	4b78      	ldr	r3, [pc, #480]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f023 0207 	bic.w	r2, r3, #7
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4975      	ldr	r1, [pc, #468]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002272:	4313      	orrs	r3, r2
 8002274:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	4b70      	ldr	r3, [pc, #448]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800228e:	429a      	cmp	r2, r3
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002292:	4b6d      	ldr	r3, [pc, #436]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	496a      	ldr	r1, [pc, #424]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	4b64      	ldr	r3, [pc, #400]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022bc:	429a      	cmp	r2, r3
 80022be:	d908      	bls.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 80022c0:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	495e      	ldr	r1, [pc, #376]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d908      	bls.n	8002300 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 80022ee:	4b56      	ldr	r3, [pc, #344]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4953      	ldr	r1, [pc, #332]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d010      	beq.n	800232e <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	429a      	cmp	r2, r3
 800231a:	d908      	bls.n	800232e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f023 020f 	bic.w	r2, r3, #15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4947      	ldr	r1, [pc, #284]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 800232a:	4313      	orrs	r3, r2
 800232c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d055      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800233a:	4b43      	ldr	r3, [pc, #268]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4940      	ldr	r1, [pc, #256]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002348:	4313      	orrs	r3, r2
 800234a:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002354:	4b3c      	ldr	r3, [pc, #240]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d121      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0dc      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800236c:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002384:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0c4      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0bc      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a4:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f023 0207 	bic.w	r2, r3, #7
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4925      	ldr	r1, [pc, #148]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b6:	f7ff f835 	bl	8001424 <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023be:	f7ff f831 	bl	8001424 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0a4      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d1eb      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	429a      	cmp	r2, r3
 8002400:	d208      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f023 020f 	bic.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x244>)
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d214      	bcs.n	800244c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800242a:	4906      	ldr	r1, [pc, #24]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <HAL_RCC_ClockConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e06c      	b.n	800251e <HAL_RCC_ClockConfig+0x31a>
 8002444:	52002000 	.word	0x52002000
 8002448:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d010      	beq.n	800247a <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	429a      	cmp	r2, r3
 8002466:	d208      	bcs.n	800247a <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002468:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 0207 	bic.w	r2, r3, #7
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	492c      	ldr	r1, [pc, #176]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 8002476:	4313      	orrs	r3, r2
 8002478:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	4b27      	ldr	r3, [pc, #156]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002492:	429a      	cmp	r2, r3
 8002494:	d208      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4921      	ldr	r1, [pc, #132]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d208      	bcs.n	80024d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4915      	ldr	r1, [pc, #84]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d208      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	490a      	ldr	r1, [pc, #40]	@ (8002528 <HAL_RCC_ClockConfig+0x324>)
 8002500:	4313      	orrs	r3, r2
 8002502:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8002504:	f000 f816 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002508:	4603      	mov	r3, r0
 800250a:	4a08      	ldr	r2, [pc, #32]	@ (800252c <HAL_RCC_ClockConfig+0x328>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_RCC_ClockConfig+0x32c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe ff36 	bl	8001384 <HAL_InitTick>
 8002518:	4603      	mov	r3, r0
 800251a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800251c:	7afb      	ldrb	r3, [r7, #11]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	2400000c 	.word	0x2400000c
 8002530:	24000010 	.word	0x24000010

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	@ 0x2c
 8002538:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4baa      	ldr	r3, [pc, #680]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002542:	2b18      	cmp	r3, #24
 8002544:	f200 8136 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x280>
 8002548:	a201      	add	r2, pc, #4	@ (adr r2, 8002550 <HAL_RCC_GetSysClockFreq+0x1c>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	080025b5 	.word	0x080025b5
 8002554:	080027b5 	.word	0x080027b5
 8002558:	080027b5 	.word	0x080027b5
 800255c:	080027b5 	.word	0x080027b5
 8002560:	080027b5 	.word	0x080027b5
 8002564:	080027b5 	.word	0x080027b5
 8002568:	080027b5 	.word	0x080027b5
 800256c:	080027b5 	.word	0x080027b5
 8002570:	080025db 	.word	0x080025db
 8002574:	080027b5 	.word	0x080027b5
 8002578:	080027b5 	.word	0x080027b5
 800257c:	080027b5 	.word	0x080027b5
 8002580:	080027b5 	.word	0x080027b5
 8002584:	080027b5 	.word	0x080027b5
 8002588:	080027b5 	.word	0x080027b5
 800258c:	080027b5 	.word	0x080027b5
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080027b5 	.word	0x080027b5
 8002598:	080027b5 	.word	0x080027b5
 800259c:	080027b5 	.word	0x080027b5
 80025a0:	080027b5 	.word	0x080027b5
 80025a4:	080027b5 	.word	0x080027b5
 80025a8:	080027b5 	.word	0x080027b5
 80025ac:	080027b5 	.word	0x080027b5
 80025b0:	080025e7 	.word	0x080025e7
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80025b4:	4b8b      	ldr	r3, [pc, #556]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80025c0:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	4a87      	ldr	r2, [pc, #540]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 80025d2:	e0f2      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	e0ef      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025da:	4b84      	ldr	r3, [pc, #528]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2b8>)
 80025dc:	623b      	str	r3, [r7, #32]
      break;
 80025de:	e0ec      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025e0:	4b83      	ldr	r3, [pc, #524]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x2bc>)
 80025e2:	623b      	str	r3, [r7, #32]
      break;
 80025e4:	e0e9      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025e6:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 80025f0:	4b7c      	ldr	r3, [pc, #496]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025fa:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025fc:	4b79      	ldr	r3, [pc, #484]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8002606:	4b77      	ldr	r3, [pc, #476]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260a:	08db      	lsrs	r3, r3, #3
 800260c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261e:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80c2 	beq.w	80027ae <HAL_RCC_GetSysClockFreq+0x27a>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d064      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x1c6>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b02      	cmp	r3, #2
 8002634:	f200 8083 	bhi.w	800273e <HAL_RCC_GetSysClockFreq+0x20a>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x112>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d038      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x182>
 8002644:	e07b      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002646:	4b67      	ldr	r3, [pc, #412]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02d      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002652:	4b64      	ldr	r3, [pc, #400]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	4a62      	ldr	r2, [pc, #392]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267c:	4b59      	ldr	r3, [pc, #356]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002690:	eddf 5a58 	vldr	s11, [pc, #352]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 80026ac:	e069      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026b4:	e065      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c0:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
 80026c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c8:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80026dc:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2c0>
 80026e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80026f8:	e043      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002704:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80027fc <HAL_RCC_GetSysClockFreq+0x2c8>
 8002708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270c:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002720:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 800273c:	e021      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002748:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80027f8 <HAL_RCC_GetSysClockFreq+0x2c4>
 800274c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002750:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002760:	ed97 6a04 	vldr	s12, [r7, #16]
 8002764:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002780:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278c:	3301      	adds	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800279a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800279e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a6:	ee17 3a90 	vmov	r3, s15
 80027aa:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027ac:	e005      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x2b8>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b07      	cmp	r3, #7
 80027c8:	d905      	bls.n	80027d6 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3b07      	subs	r3, #7
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	372c      	adds	r7, #44	@ 0x2c
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	58024400 	.word	0x58024400
 80027e8:	03d09000 	.word	0x03d09000
 80027ec:	003d0900 	.word	0x003d0900
 80027f0:	016e3600 	.word	0x016e3600
 80027f4:	46000000 	.word	0x46000000
 80027f8:	4a742400 	.word	0x4a742400
 80027fc:	4bb71b00 	.word	0x4bb71b00

08002800 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8002806:	4a10      	ldr	r2, [pc, #64]	@ (8002848 <HAL_RCC_GetHCLKFreq+0x48>)
 8002808:	463b      	mov	r3, r7
 800280a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800280e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8002812:	f7ff fe8f 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002816:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_RCC_GetHCLKFreq+0x4c>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b07      	cmp	r3, #7
 8002826:	d909      	bls.n	800283c <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3b08      	subs	r3, #8
 800282c:	3310      	adds	r3, #16
 800282e:	443b      	add	r3, r7
 8002830:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002834:	461a      	mov	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	40d3      	lsrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08004bbc 	.word	0x08004bbc
 800284c:	58024400 	.word	0x58024400

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002856:	f7ff ffd3 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800285a:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x34>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d905      	bls.n	8002878 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3b03      	subs	r3, #3
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800288e:	f7ff ffb7 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002892:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_GetPCLK2Freq+0x34>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d905      	bls.n	80028b2 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	58024400 	.word	0x58024400

080028c0 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80028c6:	f7ff ff9b 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 80028ca:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_GetPCLK4Freq+0x34>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d905      	bls.n	80028ea <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80028ea:	687b      	ldr	r3, [r7, #4]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400

080028f8 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_RCC_GetPLL2QFreq+0x28>)
 8002900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002908:	3301      	adds	r3, #1
 800290a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 800290c:	f000 f976 	bl	8002bfc <RCC_PLL2_GetVCOOutputFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400

08002924 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <HAL_RCC_GetPLL3QFreq+0x28>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002934:	3301      	adds	r3, #1
 8002936:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8002938:	f000 f9e6 	bl	8002d08 <RCC_PLL3_GetVCOOutputFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58024400 	.word	0x58024400

08002950 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	00da      	lsls	r2, r3, #3
 8002964:	4b9a      	ldr	r3, [pc, #616]	@ (8002bd0 <RCC_PLL_Config+0x280>)
 8002966:	4413      	add	r3, r2
 8002968:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	4b99      	ldr	r3, [pc, #612]	@ (8002bd4 <RCC_PLL_Config+0x284>)
 8002970:	4413      	add	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002974:	4b98      	ldr	r3, [pc, #608]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002976:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4a92      	ldr	r2, [pc, #584]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002990:	400b      	ands	r3, r1
 8002992:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002994:	4b90      	ldr	r3, [pc, #576]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	498c      	ldr	r1, [pc, #560]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029ac:	f7fe fd3a 	bl	8001424 <HAL_GetTick>
 80029b0:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80029b2:	e008      	b.n	80029c6 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fd36 	bl	8001424 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b32      	cmp	r3, #50	@ 0x32
 80029c0:	d901      	bls.n	80029c6 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0ff      	b.n	8002bc6 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80029c6:	4b84      	ldr	r3, [pc, #528]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1eb      	bne.n	80029b4 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f040 80dd 	bne.w	8002ba0 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80029f2:	4b79      	ldr	r3, [pc, #484]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	4a77      	ldr	r2, [pc, #476]	@ (8002bdc <RCC_PLL_Config+0x28c>)
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	e007      	b.n	8002a16 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d102      	bne.n	8002a12 <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8002a0c:	4b74      	ldr	r3, [pc, #464]	@ (8002be0 <RCC_PLL_Config+0x290>)
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a10:	e001      	b.n	8002a16 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <RCC_PLL_Config+0x294>)
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	4a70      	ldr	r2, [pc, #448]	@ (8002be8 <RCC_PLL_Config+0x298>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d302      	bcc.n	8002a30 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002a2a:	2318      	movs	r3, #24
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	e00f      	b.n	8002a50 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	4a6e      	ldr	r2, [pc, #440]	@ (8002bec <RCC_PLL_Config+0x29c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d902      	bls.n	8002a3e <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002a38:	2310      	movs	r3, #16
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3c:	e008      	b.n	8002a50 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf0 <RCC_PLL_Config+0x2a0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d902      	bls.n	8002a4c <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8002a46:	2308      	movs	r3, #8
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4a:	e001      	b.n	8002a50 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002a64:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	f043 0303 	orr.w	r3, r3, #3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6899      	ldr	r1, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	3304      	adds	r3, #4
 8002a86:	4099      	lsls	r1, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	4952      	ldr	r1, [pc, #328]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e090      	b.n	8002bc6 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 8002aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002aa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	221b      	movs	r2, #27
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	ea01 0203 	and.w	r2, r1, r3
 8002ac0:	4945      	ldr	r1, [pc, #276]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	431a      	orrs	r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	431a      	orrs	r2, r3
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8002b0a:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	4a32      	ldr	r2, [pc, #200]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	00da      	lsls	r2, r3, #3
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <RCC_PLL_Config+0x2a4>)
 8002b24:	4413      	add	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <RCC_PLL_Config+0x2a8>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b34:	00d2      	lsls	r2, r2, #3
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002b3c:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b54:	430b      	orrs	r3, r1
 8002b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	491b      	ldr	r1, [pc, #108]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fc59 	bl	8001424 <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002b74:	e008      	b.n	8002b88 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fc55 	bl	8001424 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b32      	cmp	r3, #50	@ 0x32
 8002b82:	d901      	bls.n	8002b88 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e01e      	b.n	8002bc6 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0eb      	beq.n	8002b76 <RCC_PLL_Config+0x226>
 8002b9e:	e010      	b.n	8002bc2 <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	3304      	adds	r3, #4
 8002baa:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	f043 0303 	orr.w	r3, r3, #3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <RCC_PLL_Config+0x288>)
 8002bbc:	f043 0303 	orr.w	r3, r3, #3
 8002bc0:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 8002bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	58024430 	.word	0x58024430
 8002bd4:	580244c0 	.word	0x580244c0
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	03d09000 	.word	0x03d09000
 8002be0:	016e3600 	.word	0x016e3600
 8002be4:	003d0900 	.word	0x003d0900
 8002be8:	007a1200 	.word	0x007a1200
 8002bec:	003d08ff 	.word	0x003d08ff
 8002bf0:	001e847f 	.word	0x001e847f
 8002bf4:	58024434 	.word	0x58024434
 8002bf8:	ffff0007 	.word	0xffff0007

08002bfc <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8002c08:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	0b1b      	lsrs	r3, r3, #12
 8002c12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c16:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e05c      	b.n	8002ce6 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8002c2c:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8002c38:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e001      	b.n	8002c4a <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d019      	beq.n	8002c88 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d81d      	bhi.n	8002c94 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <RCC_PLL2_GetVCOOutputFreq+0x66>
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d016      	beq.n	8002c8e <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002c60:	e018      	b.n	8002c94 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	08db      	lsrs	r3, r3, #3
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002c80:	e00b      	b.n	8002c9a <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
      break;
 8002c86:	e008      	b.n	8002c9a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002c88:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <RCC_PLL2_GetVCOOutputFreq+0x100>)
 8002c8a:	61fb      	str	r3, [r7, #28]
      break;
 8002c8c:	e005      	b.n	8002c9a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d00 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 8002c90:	61fb      	str	r3, [r7, #28]
      break;
 8002c92:	e002      	b.n	8002c9a <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
      break;
 8002c98:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002cc6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002d04 <RCC_PLL2_GetVCOOutputFreq+0x108>
 8002cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce2:	ee17 3a90 	vmov	r3, s15
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	03d09000 	.word	0x03d09000
 8002cfc:	016e3600 	.word	0x016e3600
 8002d00:	003d0900 	.word	0x003d0900
 8002d04:	46000000 	.word	0x46000000

08002d08 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8002d14:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	0d1b      	lsrs	r3, r3, #20
 8002d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d22:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e05c      	b.n	8002df2 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8002d38:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	e001      	b.n	8002d56 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d019      	beq.n	8002d94 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d81d      	bhi.n	8002da0 <RCC_PLL3_GetVCOOutputFreq+0x98>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <RCC_PLL3_GetVCOOutputFreq+0x66>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d016      	beq.n	8002d9a <RCC_PLL3_GetVCOOutputFreq+0x92>
 8002d6c:	e018      	b.n	8002da0 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002d6e:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002d7a:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	4a1f      	ldr	r2, [pc, #124]	@ (8002e04 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002d8c:	e00b      	b.n	8002da6 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
      break;
 8002d92:	e008      	b.n	8002da6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002d94:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 8002d96:	61fb      	str	r3, [r7, #28]
      break;
 8002d98:	e005      	b.n	8002da6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <RCC_PLL3_GetVCOOutputFreq+0x104>)
 8002d9c:	61fb      	str	r3, [r7, #28]
      break;
 8002d9e:	e002      	b.n	8002da6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
      break;
 8002da4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002dd2:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002e10 <RCC_PLL3_GetVCOOutputFreq+0x108>
 8002dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dee:	ee17 3a90 	vmov	r3, s15
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	03d09000 	.word	0x03d09000
 8002e08:	016e3600 	.word	0x016e3600
 8002e0c:	003d0900 	.word	0x003d0900
 8002e10:	46000000 	.word	0x46000000

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8081 	beq.w	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e32:	4b8c      	ldr	r3, [pc, #560]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3a:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d029      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d022      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a84      	ldr	r2, [pc, #528]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5c:	4b82      	ldr	r3, [pc, #520]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
 8002e6c:	e013      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e76:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e78:	4b7a      	ldr	r3, [pc, #488]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a79      	ldr	r2, [pc, #484]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e84:	4b77      	ldr	r3, [pc, #476]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	4a76      	ldr	r2, [pc, #472]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 8002e90:	4a74      	ldr	r2, [pc, #464]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d149      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d115      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fabd 	bl	8001424 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fab9 	bl	8001424 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ed      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d128      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002edc:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef0:	0919      	lsrs	r1, r3, #4
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	495b      	ldr	r1, [pc, #364]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	610b      	str	r3, [r1, #16]
 8002efc:	e005      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002efe:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f08:	6113      	str	r3, [r2, #16]
 8002f0a:	4b56      	ldr	r3, [pc, #344]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f16:	4953      	ldr	r1, [pc, #332]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8002f1c:	4b51      	ldr	r3, [pc, #324]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	4a50      	ldr	r2, [pc, #320]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d030      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d819      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f83 	.word	0x08002f83
 8002f54:	08002f61 	.word	0x08002f61
 8002f58:	08002f6f 	.word	0x08002f6f
 8002f5c:	08002f83 	.word	0x08002f83
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f60:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	4a3f      	ldr	r2, [pc, #252]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	4a3c      	ldr	r2, [pc, #240]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002f7a:	e003      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8002f80:	e000      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8002f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f8a:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4933      	ldr	r1, [pc, #204]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002f9c:	e001      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d811      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc6:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002fd0:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
        break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8002fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	491a      	ldr	r1, [pc, #104]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002ffe:	e001      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d031      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b80      	cmp	r3, #128	@ 0x80
 8003016:	d00c      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003018:	2b80      	cmp	r3, #128	@ 0x80
 800301a:	d811      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d10d      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4a0e      	ldr	r2, [pc, #56]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800302a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800302e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8003032:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	4a0b      	ldr	r2, [pc, #44]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800303c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
        break;
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8003046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d110      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4902      	ldr	r1, [pc, #8]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800305c:	4313      	orrs	r3, r2
 800305e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003060:	e008      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8003062:	bf00      	nop
 8003064:	58024400 	.word	0x58024400
 8003068:	58024800 	.word	0x58024800
 800306c:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003080:	4b93      	ldr	r3, [pc, #588]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003084:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4990      	ldr	r1, [pc, #576]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d026      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d007      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80030aa:	e00d      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80030ac:	4b88      	ldr	r3, [pc, #544]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	4a87      	ldr	r2, [pc, #540]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80030b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80030b8:	e009      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80030ba:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	4a84      	ldr	r2, [pc, #528]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80030c6:	e002      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
        break;
 80030cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 80030d4:	4b7e      	ldr	r3, [pc, #504]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d8:	f023 0204 	bic.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	497b      	ldr	r1, [pc, #492]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02e      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003100:	d019      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003106:	d813      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003110:	d007      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003112:	e00d      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003114:	4b6e      	ldr	r3, [pc, #440]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	4a6d      	ldr	r2, [pc, #436]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8003120:	e00a      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003122:	4b6b      	ldr	r3, [pc, #428]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	4a6a      	ldr	r2, [pc, #424]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003128:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800312c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
        break;
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8003136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313e:	4b64      	ldr	r3, [pc, #400]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4961      	ldr	r1, [pc, #388]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003150:	e001      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03f      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800316a:	d02a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800316c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003170:	d824      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003176:	d024      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317c:	d81e      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800317e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003182:	d01e      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003184:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003188:	d818      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800318a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800318e:	d00e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003194:	d812      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d013      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800319a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319e:	d10d      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80031a0:	4b4b      	ldr	r3, [pc, #300]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	4a4a      	ldr	r2, [pc, #296]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80031ac:	e00a      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80031ae:	4b48      	ldr	r3, [pc, #288]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	4a47      	ldr	r2, [pc, #284]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
        break;
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 80031c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	493e      	ldr	r1, [pc, #248]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80031dc:	e001      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ee:	4b38      	ldr	r3, [pc, #224]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4935      	ldr	r1, [pc, #212]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 800320c:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	492d      	ldr	r1, [pc, #180]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003236:	d106      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800323e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003242:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8003254:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	491b      	ldr	r1, [pc, #108]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003280:	d00e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003286:	d812      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003290:	d10d      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003292:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032ac:	e003      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
        break;
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	4901      	ldr	r1, [pc, #4]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	650b      	str	r3, [r1, #80]	@ 0x50
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80032d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02c      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032ec:	d017      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80032ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032f2:	d811      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f8:	d011      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fe:	d80b      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003308:	d106      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800330a:	4b97      	ldr	r3, [pc, #604]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4a96      	ldr	r2, [pc, #600]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003310:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003314:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
        break;
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800331e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8003326:	4b90      	ldr	r3, [pc, #576]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	498d      	ldr	r1, [pc, #564]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003334:	4313      	orrs	r3, r2
 8003336:	650b      	str	r3, [r1, #80]	@ 0x50
 8003338:	e001      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02c      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003352:	d017      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003358:	d811      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335e:	d011      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d80b      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800336a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336e:	d106      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003370:	4b7d      	ldr	r3, [pc, #500]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	4a7c      	ldr	r2, [pc, #496]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003376:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800337a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 800338c:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800338e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	4973      	ldr	r1, [pc, #460]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800339a:	4313      	orrs	r3, r2
 800339c:	650b      	str	r3, [r1, #80]	@ 0x50
 800339e:	e001      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d045      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d02a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80033ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033be:	d824      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80033c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033c4:	d026      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80033c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033ca:	d81e      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80033cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033d0:	d022      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80033d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033d6:	d818      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80033d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033dc:	d00e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80033de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e2:	d812      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d019      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d10d      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80033ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80033fa:	e010      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80033fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a59      	ldr	r2, [pc, #356]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003402:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003406:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003408:	e009      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
        break;
 800340e:	e006      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003410:	bf00      	nop
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003414:	bf00      	nop
 8003416:	e002      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003418:	bf00      	nop
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003424:	4b50      	ldr	r3, [pc, #320]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003428:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	494d      	ldr	r1, [pc, #308]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003432:	4313      	orrs	r3, r2
 8003434:	650b      	str	r3, [r1, #80]	@ 0x50
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d045      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003450:	d02a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8003452:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003456:	d824      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345c:	d026      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x698>
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d81e      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003468:	d022      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800346a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800346e:	d818      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003474:	d00e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800347a:	d812      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d019      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8003480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003484:	d10d      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003486:	4b38      	ldr	r3, [pc, #224]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	4a37      	ldr	r2, [pc, #220]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003490:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003492:	e010      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a33      	ldr	r2, [pc, #204]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800349a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 80034a0:	e009      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
        break;
 80034a6:	e006      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80034a8:	bf00      	nop
 80034aa:	e004      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80034ac:	bf00      	nop
 80034ae:	e002      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80034b0:	bf00      	nop
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80034b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 80034bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	4927      	ldr	r1, [pc, #156]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	658b      	str	r3, [r1, #88]	@ 0x58
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d047      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034e8:	d02a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80034ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034ee:	d824      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80034f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f4:	d026      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x730>
 80034f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034fa:	d81e      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80034fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003500:	d022      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8003502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003506:	d818      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350c:	d00e      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x718>
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003512:	d812      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d019      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351c:	d10d      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 800352a:	e010      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003532:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003536:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003538:	e009      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
        break;
 800353e:	e006      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003540:	bf00      	nop
 8003542:	e004      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 800354c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	4901      	ldr	r1, [pc, #4]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003562:	4313      	orrs	r3, r2
 8003564:	658b      	str	r3, [r1, #88]	@ 0x58
 8003566:	e003      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8003568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d034      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	2b05      	cmp	r3, #5
 8003582:	d81d      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035c7 	.word	0x080035c7
 8003590:	080035a5 	.word	0x080035a5
 8003594:	080035b3 	.word	0x080035b3
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035c7 	.word	0x080035c7
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80035a4:	4b91      	ldr	r3, [pc, #580]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	4a90      	ldr	r2, [pc, #576]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035b0:	e00a      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80035b2:	4b8e      	ldr	r3, [pc, #568]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	4a8d      	ldr	r2, [pc, #564]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
        break;
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 80035c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ce:	4b87      	ldr	r3, [pc, #540]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	4984      	ldr	r1, [pc, #528]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	658b      	str	r3, [r1, #88]	@ 0x58
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80035f2:	4b7e      	ldr	r3, [pc, #504]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	4a7d      	ldr	r2, [pc, #500]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80035f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d021      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800361a:	4b74      	ldr	r3, [pc, #464]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	4a73      	ldr	r2, [pc, #460]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003620:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003624:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
        break;
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8003636:	4b6d      	ldr	r3, [pc, #436]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003642:	496a      	ldr	r1, [pc, #424]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003648:	e001      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d043      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003662:	d02c      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003668:	d826      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800366a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800366e:	d028      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003674:	d820      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800367a:	d016      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x896>
 800367c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003680:	d81a      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d007      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800368c:	e014      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800368e:	4b57      	ldr	r3, [pc, #348]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	4a56      	ldr	r2, [pc, #344]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003698:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800369a:	e013      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a8:	e00c      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80036aa:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	4a4f      	ldr	r2, [pc, #316]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80036b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b6:	e005      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
        break;
 80036bc:	e002      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80036c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ca:	4b48      	ldr	r3, [pc, #288]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d6:	4945      	ldr	r1, [pc, #276]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	654b      	str	r3, [r1, #84]	@ 0x54
 80036dc:	e001      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04b      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80036f6:	d032      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80036f8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80036fc:	d82c      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80036fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003702:	d02e      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003708:	d826      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800370a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800370e:	d02a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003710:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003714:	d820      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800371a:	d016      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x936>
 800371c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003720:	d81a      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800372a:	d007      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x928>
 800372c:	e014      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	4a2e      	ldr	r2, [pc, #184]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003738:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800373a:	e015      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003746:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003748:	e00e      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800374a:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	4a27      	ldr	r2, [pc, #156]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003754:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003756:	e007      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
        break;
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800376e:	4b1f      	ldr	r3, [pc, #124]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003772:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	491c      	ldr	r1, [pc, #112]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	654b      	str	r3, [r1, #84]	@ 0x54
 8003780:	e001      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03e      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003796:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800379a:	d029      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800379c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037a0:	d820      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80037a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a6:	d016      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80037a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ac:	d81a      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80037b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b6:	d007      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80037b8:	e014      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037c6:	e014      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037d4:	e00d      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80037dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037e2:	e006      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
        break;
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003804:	498b      	ldr	r1, [pc, #556]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003806:	4313      	orrs	r3, r2
 8003808:	650b      	str	r3, [r1, #80]	@ 0x50
 800380a:	e001      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d043      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003824:	d02c      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382a:	d826      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800382c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003830:	d028      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003836:	d820      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800383c:	d016      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800383e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003842:	d81a      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384c:	d007      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 800384e:	e014      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003850:	4b78      	ldr	r3, [pc, #480]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	4a77      	ldr	r2, [pc, #476]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800385a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800385c:	e013      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800385e:	4b75      	ldr	r3, [pc, #468]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a74      	ldr	r2, [pc, #464]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800386c:	4b71      	ldr	r3, [pc, #452]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4a70      	ldr	r2, [pc, #448]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003872:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003878:	e005      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
        break;
 800387e:	e002      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 800388c:	4b69      	ldr	r3, [pc, #420]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	4966      	ldr	r1, [pc, #408]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800389a:	4313      	orrs	r3, r2
 800389c:	654b      	str	r3, [r1, #84]	@ 0x54
 800389e:	e001      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03c      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d026      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d821      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80038bc:	2b30      	cmp	r3, #48	@ 0x30
 80038be:	d024      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80038c0:	2b30      	cmp	r3, #48	@ 0x30
 80038c2:	d81d      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d014      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d819      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d007      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80038d4:	e014      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038d6:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80038e2:	e013      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	4a52      	ldr	r2, [pc, #328]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80038f0:	e00c      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80038f2:	4b50      	ldr	r3, [pc, #320]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80038fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80038fe:	e005      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
        break;
 8003904:	e002      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800390a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003912:	4b48      	ldr	r3, [pc, #288]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	4945      	ldr	r1, [pc, #276]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003920:	4313      	orrs	r3, r2
 8003922:	650b      	str	r3, [r1, #80]	@ 0x50
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d03c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	2b50      	cmp	r3, #80	@ 0x50
 800393c:	d022      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800393e:	2b50      	cmp	r3, #80	@ 0x50
 8003940:	d81d      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d020      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d819      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800394a:	2b30      	cmp	r3, #48	@ 0x30
 800394c:	d01e      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800394e:	2b30      	cmp	r3, #48	@ 0x30
 8003950:	d815      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d00c      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003956:	2b20      	cmp	r3, #32
 8003958:	d811      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d10d      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003962:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	4a33      	ldr	r2, [pc, #204]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800396e:	e010      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003970:	4b30      	ldr	r3, [pc, #192]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	4a2f      	ldr	r2, [pc, #188]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800397c:	e009      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
        break;
 8003982:	e006      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003984:	bf00      	nop
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003998:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800399a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a4:	4923      	ldr	r1, [pc, #140]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	654b      	str	r3, [r1, #84]	@ 0x54
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d03f      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c0:	2b50      	cmp	r3, #80	@ 0x50
 80039c2:	d022      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80039c4:	2b50      	cmp	r3, #80	@ 0x50
 80039c6:	d81d      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d020      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d819      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80039d0:	2b30      	cmp	r3, #48	@ 0x30
 80039d2:	d01e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80039d4:	2b30      	cmp	r3, #48	@ 0x30
 80039d6:	d815      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d00c      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d811      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039f4:	e010      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a02:	e009      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
        break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e004      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a2a:	4902      	ldr	r1, [pc, #8]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	658b      	str	r3, [r1, #88]	@ 0x58
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003a32:	bf00      	nop
 8003a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d034      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d81d      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a50:	a201      	add	r2, pc, #4	@ (adr r2, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a93 	.word	0x08003a93
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a7f 	.word	0x08003a7f
 8003a64:	08003a93 	.word	0x08003a93
 8003a68:	08003a93 	.word	0x08003a93
 8003a6c:	08003a93 	.word	0x08003a93
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003a70:	4b69      	ldr	r3, [pc, #420]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	4a68      	ldr	r2, [pc, #416]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003a7e:	4b66      	ldr	r3, [pc, #408]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	4a65      	ldr	r2, [pc, #404]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e003      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
        break;
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8003a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa6:	495c      	ldr	r1, [pc, #368]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	654b      	str	r3, [r1, #84]	@ 0x54
 8003aac:	e001      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d033      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d81c      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b07 	.word	0x08003b07
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003af3 	.word	0x08003af3
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b07 	.word	0x08003b07
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003af2:	4b49      	ldr	r3, [pc, #292]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	4a48      	ldr	r2, [pc, #288]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
        break;
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b0e:	4b42      	ldr	r3, [pc, #264]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	f023 0207 	bic.w	r2, r3, #7
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	493f      	ldr	r1, [pc, #252]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	650b      	str	r3, [r1, #80]	@ 0x50
 8003b20:	e001      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d027      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b40:	d80c      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003b4e:	4b32      	ldr	r3, [pc, #200]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	4a31      	ldr	r2, [pc, #196]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
        break;
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8003b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	4928      	ldr	r1, [pc, #160]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da2c      	bge.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b92:	d017      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003b94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b98:	d811      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b9e:	d011      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba4:	d80b      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a18      	ldr	r2, [pc, #96]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 8003bbc:	e003      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
        break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd8:	490f      	ldr	r1, [pc, #60]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bfe:	4906      	ldr	r1, [pc, #24]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8003c04:	7dbb      	ldrb	r3, [r7, #22]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	58024400 	.word	0x58024400

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd f893 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	@ 0x24
 8003c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fc4c 	bl	8004504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8b3 	bl	8003dd8 <UART_SetConfig>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01b      	b.n	8003cb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fccb 	bl	8004648 <UART_CheckIdleState>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	@ 0x28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d17b      	bne.n	8003dce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_UART_Transmit+0x26>
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e074      	b.n	8003dd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2221      	movs	r2, #33	@ 0x21
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fb95 	bl	8001424 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d14:	d108      	bne.n	8003d28 <HAL_UART_Transmit+0x6c>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e003      	b.n	8003d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d30:	e030      	b.n	8003d94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fd2d 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e03d      	b.n	8003dd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e007      	b.n	8003d82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1c8      	bne.n	8003d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2140      	movs	r1, #64	@ 0x40
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fcf6 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e006      	b.n	8003dd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b08c      	sub	sp, #48	@ 0x30
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4bb3      	ldr	r3, [pc, #716]	@ (80040d4 <UART_SetConfig+0x2fc>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4aa8      	ldr	r2, [pc, #672]	@ (80040d8 <UART_SetConfig+0x300>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e40:	4313      	orrs	r3, r2
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	4ba4      	ldr	r3, [pc, #656]	@ (80040dc <UART_SetConfig+0x304>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	f023 010f 	bic.w	r1, r3, #15
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a9b      	ldr	r2, [pc, #620]	@ (80040e0 <UART_SetConfig+0x308>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d131      	bne.n	8003edc <UART_SetConfig+0x104>
 8003e78:	4b9a      	ldr	r3, [pc, #616]	@ (80040e4 <UART_SetConfig+0x30c>)
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d827      	bhi.n	8003ed4 <UART_SetConfig+0xfc>
 8003e84:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <UART_SetConfig+0xb4>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003ea5 	.word	0x08003ea5
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eaa:	e0a0      	b.n	8003fee <UART_SetConfig+0x216>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb2:	e09c      	b.n	8003fee <UART_SetConfig+0x216>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eba:	e098      	b.n	8003fee <UART_SetConfig+0x216>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec2:	e094      	b.n	8003fee <UART_SetConfig+0x216>
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eca:	e090      	b.n	8003fee <UART_SetConfig+0x216>
 8003ecc:	2340      	movs	r3, #64	@ 0x40
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed2:	e08c      	b.n	8003fee <UART_SetConfig+0x216>
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eda:	e088      	b.n	8003fee <UART_SetConfig+0x216>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a81      	ldr	r2, [pc, #516]	@ (80040e8 <UART_SetConfig+0x310>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <UART_SetConfig+0x140>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a80      	ldr	r2, [pc, #512]	@ (80040ec <UART_SetConfig+0x314>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <UART_SetConfig+0x140>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a7e      	ldr	r2, [pc, #504]	@ (80040f0 <UART_SetConfig+0x318>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <UART_SetConfig+0x140>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7d      	ldr	r2, [pc, #500]	@ (80040f4 <UART_SetConfig+0x31c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <UART_SetConfig+0x140>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a7b      	ldr	r2, [pc, #492]	@ (80040f8 <UART_SetConfig+0x320>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <UART_SetConfig+0x140>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7a      	ldr	r2, [pc, #488]	@ (80040fc <UART_SetConfig+0x324>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d131      	bne.n	8003f7c <UART_SetConfig+0x1a4>
 8003f18:	4b72      	ldr	r3, [pc, #456]	@ (80040e4 <UART_SetConfig+0x30c>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	2b05      	cmp	r3, #5
 8003f22:	d827      	bhi.n	8003f74 <UART_SetConfig+0x19c>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <UART_SetConfig+0x154>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4d 	.word	0x08003f4d
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4a:	e016      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e012      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5a:	e00e      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f62:	e00a      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f64:	2320      	movs	r3, #32
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e006      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f6c:	2340      	movs	r3, #64	@ 0x40
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e002      	b.n	8003f7a <UART_SetConfig+0x1a2>
 8003f74:	2380      	movs	r3, #128	@ 0x80
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	e038      	b.n	8003fee <UART_SetConfig+0x216>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a55      	ldr	r2, [pc, #340]	@ (80040d8 <UART_SetConfig+0x300>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d130      	bne.n	8003fe8 <UART_SetConfig+0x210>
 8003f86:	4b57      	ldr	r3, [pc, #348]	@ (80040e4 <UART_SetConfig+0x30c>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d826      	bhi.n	8003fe0 <UART_SetConfig+0x208>
 8003f92:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <UART_SetConfig+0x1c0>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb6:	e01a      	b.n	8003fee <UART_SetConfig+0x216>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fbe:	e016      	b.n	8003fee <UART_SetConfig+0x216>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e012      	b.n	8003fee <UART_SetConfig+0x216>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e00e      	b.n	8003fee <UART_SetConfig+0x216>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e00a      	b.n	8003fee <UART_SetConfig+0x216>
 8003fd8:	2340      	movs	r3, #64	@ 0x40
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e006      	b.n	8003fee <UART_SetConfig+0x216>
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe6:	e002      	b.n	8003fee <UART_SetConfig+0x216>
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a39      	ldr	r2, [pc, #228]	@ (80040d8 <UART_SetConfig+0x300>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	f040 80fe 	bne.w	80041f6 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	dc48      	bgt.n	8004094 <UART_SetConfig+0x2bc>
 8004002:	2b02      	cmp	r3, #2
 8004004:	f2c0 8088 	blt.w	8004118 <UART_SetConfig+0x340>
 8004008:	3b02      	subs	r3, #2
 800400a:	2b1e      	cmp	r3, #30
 800400c:	f200 8084 	bhi.w	8004118 <UART_SetConfig+0x340>
 8004010:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <UART_SetConfig+0x240>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	080040ab 	.word	0x080040ab
 800401c:	08004119 	.word	0x08004119
 8004020:	0800409b 	.word	0x0800409b
 8004024:	08004119 	.word	0x08004119
 8004028:	08004119 	.word	0x08004119
 800402c:	08004119 	.word	0x08004119
 8004030:	080040a3 	.word	0x080040a3
 8004034:	08004119 	.word	0x08004119
 8004038:	08004119 	.word	0x08004119
 800403c:	08004119 	.word	0x08004119
 8004040:	08004119 	.word	0x08004119
 8004044:	08004119 	.word	0x08004119
 8004048:	08004119 	.word	0x08004119
 800404c:	08004119 	.word	0x08004119
 8004050:	080040b3 	.word	0x080040b3
 8004054:	08004119 	.word	0x08004119
 8004058:	08004119 	.word	0x08004119
 800405c:	08004119 	.word	0x08004119
 8004060:	08004119 	.word	0x08004119
 8004064:	08004119 	.word	0x08004119
 8004068:	08004119 	.word	0x08004119
 800406c:	08004119 	.word	0x08004119
 8004070:	08004119 	.word	0x08004119
 8004074:	08004119 	.word	0x08004119
 8004078:	08004119 	.word	0x08004119
 800407c:	08004119 	.word	0x08004119
 8004080:	08004119 	.word	0x08004119
 8004084:	08004119 	.word	0x08004119
 8004088:	08004119 	.word	0x08004119
 800408c:	08004119 	.word	0x08004119
 8004090:	0800410b 	.word	0x0800410b
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d03b      	beq.n	8004110 <UART_SetConfig+0x338>
 8004098:	e03e      	b.n	8004118 <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 800409a:	f7fe fc2d 	bl	80028f8 <HAL_RCC_GetPLL2QFreq>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a0:	e040      	b.n	8004124 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 80040a2:	f7fe fc3f 	bl	8002924 <HAL_RCC_GetPLL3QFreq>
 80040a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a8:	e03c      	b.n	8004124 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 80040aa:	f7fe fc09 	bl	80028c0 <HAL_RCC_GetPCLK4Freq>
 80040ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040b0:	e038      	b.n	8004124 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b2:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <UART_SetConfig+0x30c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d022      	beq.n	8004104 <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <UART_SetConfig+0x30c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	08db      	lsrs	r3, r3, #3
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004100 <UART_SetConfig+0x328>)
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80040d0:	e028      	b.n	8004124 <UART_SetConfig+0x34c>
 80040d2:	bf00      	nop
 80040d4:	cfff69f3 	.word	0xcfff69f3
 80040d8:	58000c00 	.word	0x58000c00
 80040dc:	11fff4ff 	.word	0x11fff4ff
 80040e0:	42001000 	.word	0x42001000
 80040e4:	58024400 	.word	0x58024400
 80040e8:	40004400 	.word	0x40004400
 80040ec:	40004800 	.word	0x40004800
 80040f0:	40004c00 	.word	0x40004c00
 80040f4:	40005000 	.word	0x40005000
 80040f8:	40007800 	.word	0x40007800
 80040fc:	40007c00 	.word	0x40007c00
 8004100:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004104:	4b99      	ldr	r3, [pc, #612]	@ (800436c <UART_SetConfig+0x594>)
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004108:	e00c      	b.n	8004124 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800410a:	4b99      	ldr	r3, [pc, #612]	@ (8004370 <UART_SetConfig+0x598>)
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800410e:	e009      	b.n	8004124 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004116:	e005      	b.n	8004124 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004122:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 81ce 	beq.w	80044c8 <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	4a90      	ldr	r2, [pc, #576]	@ (8004374 <UART_SetConfig+0x59c>)
 8004132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004136:	461a      	mov	r2, r3
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	fbb3 f3f2 	udiv	r3, r3, r2
 800413e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d305      	bcc.n	800415c <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d903      	bls.n	8004164 <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004162:	e1b1      	b.n	80044c8 <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2200      	movs	r2, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	60fa      	str	r2, [r7, #12]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	4a80      	ldr	r2, [pc, #512]	@ (8004374 <UART_SetConfig+0x59c>)
 8004172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004176:	b29b      	uxth	r3, r3
 8004178:	2200      	movs	r2, #0
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004186:	f7fc f8b3 	bl	80002f0 <__aeabi_uldivmod>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	020b      	lsls	r3, r1, #8
 800419c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041a0:	0202      	lsls	r2, r0, #8
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	6849      	ldr	r1, [r1, #4]
 80041a6:	0849      	lsrs	r1, r1, #1
 80041a8:	2000      	movs	r0, #0
 80041aa:	460c      	mov	r4, r1
 80041ac:	4605      	mov	r5, r0
 80041ae:	eb12 0804 	adds.w	r8, r2, r4
 80041b2:	eb43 0905 	adc.w	r9, r3, r5
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	469a      	mov	sl, r3
 80041be:	4693      	mov	fp, r2
 80041c0:	4652      	mov	r2, sl
 80041c2:	465b      	mov	r3, fp
 80041c4:	4640      	mov	r0, r8
 80041c6:	4649      	mov	r1, r9
 80041c8:	f7fc f892 	bl	80002f0 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041da:	d308      	bcc.n	80041ee <UART_SetConfig+0x416>
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e2:	d204      	bcs.n	80041ee <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e16c      	b.n	80044c8 <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041f4:	e168      	b.n	80044c8 <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fe:	f040 80bd 	bne.w	800437c <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 8004202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004206:	2b20      	cmp	r3, #32
 8004208:	dc48      	bgt.n	800429c <UART_SetConfig+0x4c4>
 800420a:	2b00      	cmp	r3, #0
 800420c:	db73      	blt.n	80042f6 <UART_SetConfig+0x51e>
 800420e:	2b20      	cmp	r3, #32
 8004210:	d871      	bhi.n	80042f6 <UART_SetConfig+0x51e>
 8004212:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <UART_SetConfig+0x440>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	080042a3 	.word	0x080042a3
 800421c:	080042ab 	.word	0x080042ab
 8004220:	080042f7 	.word	0x080042f7
 8004224:	080042f7 	.word	0x080042f7
 8004228:	080042b3 	.word	0x080042b3
 800422c:	080042f7 	.word	0x080042f7
 8004230:	080042f7 	.word	0x080042f7
 8004234:	080042f7 	.word	0x080042f7
 8004238:	080042bb 	.word	0x080042bb
 800423c:	080042f7 	.word	0x080042f7
 8004240:	080042f7 	.word	0x080042f7
 8004244:	080042f7 	.word	0x080042f7
 8004248:	080042f7 	.word	0x080042f7
 800424c:	080042f7 	.word	0x080042f7
 8004250:	080042f7 	.word	0x080042f7
 8004254:	080042f7 	.word	0x080042f7
 8004258:	080042c3 	.word	0x080042c3
 800425c:	080042f7 	.word	0x080042f7
 8004260:	080042f7 	.word	0x080042f7
 8004264:	080042f7 	.word	0x080042f7
 8004268:	080042f7 	.word	0x080042f7
 800426c:	080042f7 	.word	0x080042f7
 8004270:	080042f7 	.word	0x080042f7
 8004274:	080042f7 	.word	0x080042f7
 8004278:	080042f7 	.word	0x080042f7
 800427c:	080042f7 	.word	0x080042f7
 8004280:	080042f7 	.word	0x080042f7
 8004284:	080042f7 	.word	0x080042f7
 8004288:	080042f7 	.word	0x080042f7
 800428c:	080042f7 	.word	0x080042f7
 8004290:	080042f7 	.word	0x080042f7
 8004294:	080042f7 	.word	0x080042f7
 8004298:	080042e9 	.word	0x080042e9
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d026      	beq.n	80042ee <UART_SetConfig+0x516>
 80042a0:	e029      	b.n	80042f6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a2:	f7fe fad5 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80042a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a8:	e02b      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042aa:	f7fe faed 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b0:	e027      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 80042b2:	f7fe fb21 	bl	80028f8 <HAL_RCC_GetPLL2QFreq>
 80042b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b8:	e023      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 80042ba:	f7fe fb33 	bl	8002924 <HAL_RCC_GetPLL3QFreq>
 80042be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042c0:	e01f      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004378 <UART_SetConfig+0x5a0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80042ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <UART_SetConfig+0x5a0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	4a24      	ldr	r2, [pc, #144]	@ (800436c <UART_SetConfig+0x594>)
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042e0:	e00f      	b.n	8004302 <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 80042e2:	4b22      	ldr	r3, [pc, #136]	@ (800436c <UART_SetConfig+0x594>)
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042e6:	e00c      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80042e8:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <UART_SetConfig+0x598>)
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80df 	beq.w	80044c8 <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <UART_SetConfig+0x59c>)
 8004310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004314:	461a      	mov	r2, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	fbb3 f3f2 	udiv	r3, r3, r2
 800431c:	005a      	lsls	r2, r3, #1
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	441a      	add	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	d916      	bls.n	8004364 <UART_SetConfig+0x58c>
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433c:	d212      	bcs.n	8004364 <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f023 030f 	bic.w	r3, r3, #15
 8004346:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	b29a      	uxth	r2, r3
 8004354:	8bfb      	ldrh	r3, [r7, #30]
 8004356:	4313      	orrs	r3, r2
 8004358:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	8bfa      	ldrh	r2, [r7, #30]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	e0b1      	b.n	80044c8 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800436a:	e0ad      	b.n	80044c8 <UART_SetConfig+0x6f0>
 800436c:	03d09000 	.word	0x03d09000
 8004370:	003d0900 	.word	0x003d0900
 8004374:	08004bc4 	.word	0x08004bc4
 8004378:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800437c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004380:	2b20      	cmp	r3, #32
 8004382:	dc49      	bgt.n	8004418 <UART_SetConfig+0x640>
 8004384:	2b00      	cmp	r3, #0
 8004386:	db74      	blt.n	8004472 <UART_SetConfig+0x69a>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d872      	bhi.n	8004472 <UART_SetConfig+0x69a>
 800438c:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <UART_SetConfig+0x5bc>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	0800441f 	.word	0x0800441f
 8004398:	08004427 	.word	0x08004427
 800439c:	08004473 	.word	0x08004473
 80043a0:	08004473 	.word	0x08004473
 80043a4:	0800442f 	.word	0x0800442f
 80043a8:	08004473 	.word	0x08004473
 80043ac:	08004473 	.word	0x08004473
 80043b0:	08004473 	.word	0x08004473
 80043b4:	08004437 	.word	0x08004437
 80043b8:	08004473 	.word	0x08004473
 80043bc:	08004473 	.word	0x08004473
 80043c0:	08004473 	.word	0x08004473
 80043c4:	08004473 	.word	0x08004473
 80043c8:	08004473 	.word	0x08004473
 80043cc:	08004473 	.word	0x08004473
 80043d0:	08004473 	.word	0x08004473
 80043d4:	0800443f 	.word	0x0800443f
 80043d8:	08004473 	.word	0x08004473
 80043dc:	08004473 	.word	0x08004473
 80043e0:	08004473 	.word	0x08004473
 80043e4:	08004473 	.word	0x08004473
 80043e8:	08004473 	.word	0x08004473
 80043ec:	08004473 	.word	0x08004473
 80043f0:	08004473 	.word	0x08004473
 80043f4:	08004473 	.word	0x08004473
 80043f8:	08004473 	.word	0x08004473
 80043fc:	08004473 	.word	0x08004473
 8004400:	08004473 	.word	0x08004473
 8004404:	08004473 	.word	0x08004473
 8004408:	08004473 	.word	0x08004473
 800440c:	08004473 	.word	0x08004473
 8004410:	08004473 	.word	0x08004473
 8004414:	08004465 	.word	0x08004465
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	d026      	beq.n	800446a <UART_SetConfig+0x692>
 800441c:	e029      	b.n	8004472 <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441e:	f7fe fa17 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8004422:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004424:	e02b      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004426:	f7fe fa2f 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 800442a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800442c:	e027      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 800442e:	f7fe fa63 	bl	80028f8 <HAL_RCC_GetPLL2QFreq>
 8004432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004434:	e023      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8004436:	f7fe fa75 	bl	8002924 <HAL_RCC_GetPLL3QFreq>
 800443a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800443c:	e01f      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800443e:	4b2d      	ldr	r3, [pc, #180]	@ (80044f4 <UART_SetConfig+0x71c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800444a:	4b2a      	ldr	r3, [pc, #168]	@ (80044f4 <UART_SetConfig+0x71c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	08db      	lsrs	r3, r3, #3
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <UART_SetConfig+0x720>)
 8004456:	fa22 f303 	lsr.w	r3, r2, r3
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800445c:	e00f      	b.n	800447e <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 800445e:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <UART_SetConfig+0x720>)
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004462:	e00c      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004464:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <UART_SetConfig+0x724>)
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004468:	e009      	b.n	800447e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004470:	e005      	b.n	800447e <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800447c:	bf00      	nop
    }

    if (pclk != 0U)
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d021      	beq.n	80044c8 <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <UART_SetConfig+0x728>)
 800448a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448e:	461a      	mov	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	fbb3 f2f2 	udiv	r2, r3, r2
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	441a      	add	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d909      	bls.n	80044c2 <UART_SetConfig+0x6ea>
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b4:	d205      	bcs.n	80044c2 <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e002      	b.n	80044c8 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80044e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	@ 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	03d09000 	.word	0x03d09000
 80044fc:	003d0900 	.word	0x003d0900
 8004500:	08004bc4 	.word	0x08004bc4

08004504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004602:	d10a      	bne.n	800461a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b098      	sub	sp, #96	@ 0x60
 800464c:	af02      	add	r7, sp, #8
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004658:	f7fc fee4 	bl	8001424 <HAL_GetTick>
 800465c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d12f      	bne.n	80046cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f88e 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d022      	beq.n	80046cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469a:	653b      	str	r3, [r7, #80]	@ 0x50
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e063      	b.n	8004794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d149      	bne.n	800476e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e2:	2200      	movs	r2, #0
 80046e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f857 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d03c      	beq.n	800476e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	623b      	str	r3, [r7, #32]
   return(result);
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30
 8004714:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60fb      	str	r3, [r7, #12]
   return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004746:	61fa      	str	r2, [r7, #28]
 8004748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	617b      	str	r3, [r7, #20]
   return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e012      	b.n	8004794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	@ 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e04f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d04b      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fc fe35 	bl	8001424 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e04e      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d034      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d031      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d110      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f839 	bl	8004878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2208      	movs	r2, #8
 800480a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e029      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004828:	d111      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f81f 	bl	8004878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0a0      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b095      	sub	sp, #84	@ 0x54
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489e:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <UART_EndRxTransfer+0xc8>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d118      	bne.n	8004920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	647b      	str	r3, [r7, #68]	@ 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004934:	bf00      	nop
 8004936:	3754      	adds	r7, #84	@ 0x54
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	effffffe 	.word	0xeffffffe

08004944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_UARTEx_DisableFifoMode+0x16>
 8004956:	2302      	movs	r3, #2
 8004958:	e027      	b.n	80049aa <HAL_UARTEx_DisableFifoMode+0x66>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2224      	movs	r2, #36	@ 0x24
 8004966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e02d      	b.n	8004a2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2224      	movs	r2, #36	@ 0x24
 80049da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f850 	bl	8004ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e02d      	b.n	8004aa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2224      	movs	r2, #36	@ 0x24
 8004a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f812 	bl	8004ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ad0:	e031      	b.n	8004b36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	0f5b      	lsrs	r3, r3, #29
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	7b3a      	ldrb	r2, [r7, #12]
 8004afe:	4911      	ldr	r1, [pc, #68]	@ (8004b44 <UARTEx_SetNbDataToProcess+0x94>)
 8004b00:	5c8a      	ldrb	r2, [r1, r2]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b06:	7b3a      	ldrb	r2, [r7, #12]
 8004b08:	490f      	ldr	r1, [pc, #60]	@ (8004b48 <UARTEx_SetNbDataToProcess+0x98>)
 8004b0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	7b7a      	ldrb	r2, [r7, #13]
 8004b1c:	4909      	ldr	r1, [pc, #36]	@ (8004b44 <UARTEx_SetNbDataToProcess+0x94>)
 8004b1e:	5c8a      	ldrb	r2, [r1, r2]
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b24:	7b7a      	ldrb	r2, [r7, #13]
 8004b26:	4908      	ldr	r1, [pc, #32]	@ (8004b48 <UARTEx_SetNbDataToProcess+0x98>)
 8004b28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	08004bdc 	.word	0x08004bdc
 8004b48:	08004be4 	.word	0x08004be4

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	@ (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f000 f818 	bl	8004ba4 <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08004bf4 	.word	0x08004bf4
 8004b98:	08004bf4 	.word	0x08004bf4
 8004b9c:	08004bf4 	.word	0x08004bf4
 8004ba0:	08004bf8 	.word	0x08004bf8

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
