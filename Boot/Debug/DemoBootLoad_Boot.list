
DemoBootLoad_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080043dc  080043dc  000053dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004418  08004418  00005418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  0800441c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2400000c  08004428  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00007000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e916  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca0  00000000  00000000  00014950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  000165f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  00017198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003054f  00000000  00000000  00017a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e739  00000000  00000000  00047fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013478d  00000000  00000000  0005670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ae9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  0018aee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018df2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080043c4 	.word	0x080043c4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	080043c4 	.word	0x080043c4

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e4:	f000 f988 	bl	80008f8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fac3 	bl	8000b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f864 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f912 	bl	8000818 <MX_GPIO_Init>
  MX_UART7_Init();
 80005f4:	f000 f8c4 	bl	8000780 <MX_UART7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myCounter++;
 80005f8:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <main+0xc4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a29      	ldr	r2, [pc, #164]	@ (80006a4 <main+0xc4>)
 8000600:	6013      	str	r3, [r2, #0]
	  tx_buff[0] = 49;
 8000602:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <main+0xc8>)
 8000604:	2231      	movs	r2, #49	@ 0x31
 8000606:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	4827      	ldr	r0, [pc, #156]	@ (80006ac <main+0xcc>)
 800060e:	f000 fe09 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	@ 0x64
 8000614:	f000 fb22 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_5, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	4823      	ldr	r0, [pc, #140]	@ (80006ac <main+0xcc>)
 800061e:	f000 fe01 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	@ 0x64
 8000624:	f000 fb1a 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_2, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2104      	movs	r1, #4
 800062c:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <main+0xd0>)
 800062e:	f000 fdf9 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f000 fb12 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <main+0xd0>)
 800063e:	f000 fdf1 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000642:	2064      	movs	r0, #100	@ 0x64
 8000644:	f000 fb0a 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	4817      	ldr	r0, [pc, #92]	@ (80006ac <main+0xcc>)
 800064e:	f000 fde9 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000652:	2064      	movs	r0, #100	@ 0x64
 8000654:	f000 fb02 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_5, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	4813      	ldr	r0, [pc, #76]	@ (80006ac <main+0xcc>)
 800065e:	f000 fde1 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000662:	2064      	movs	r0, #100	@ 0x64
 8000664:	f000 fafa 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_2, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2104      	movs	r1, #4
 800066c:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <main+0xd0>)
 800066e:	f000 fdd9 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f000 faf2 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2108      	movs	r1, #8
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <main+0xd0>)
 800067e:	f000 fdd1 	bl	8001224 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000682:	2064      	movs	r0, #100	@ 0x64
 8000684:	f000 faea 	bl	8000c5c <HAL_Delay>
	  HAL_UART_Transmit(&huart7, tx_buff, 1, 1000);
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	2201      	movs	r2, #1
 800068e:	4906      	ldr	r1, [pc, #24]	@ (80006a8 <main+0xc8>)
 8000690:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <main+0xd4>)
 8000692:	f002 ff23 	bl	80034dc <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069a:	f000 fadf 	bl	8000c5c <HAL_Delay>
	  myCounter++;
 800069e:	bf00      	nop
 80006a0:	e7aa      	b.n	80005f8 <main+0x18>
 80006a2:	bf00      	nop
 80006a4:	240000bc 	.word	0x240000bc
 80006a8:	240000c0 	.word	0x240000c0
 80006ac:	58023800 	.word	0x58023800
 80006b0:	58023000 	.word	0x58023000
 80006b4:	24000028 	.word	0x24000028

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0b0      	sub	sp, #192	@ 0xc0
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c2:	229c      	movs	r2, #156	@ 0x9c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fe50 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2220      	movs	r2, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fe4a 	bl	800436c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fe0d 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x30>
  {
    Error_Handler();
 80006e4:	f000 f934 	bl	8000950 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 37;
 8000704:	2325      	movs	r3, #37	@ 0x25
 8000706:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 4096;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
 8000722:	2300      	movs	r3, #0
 8000724:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fe3d 	bl	80013b0 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800073c:	f000 f908 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	233f      	movs	r3, #63	@ 0x3f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800074c:	2308      	movs	r3, #8
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000750:	2304      	movs	r3, #4
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000754:	2340      	movs	r3, #64	@ 0x40
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 800075e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000762:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2136      	movs	r1, #54	@ 0x36
 8000768:	4618      	mov	r0, r3
 800076a:	f001 f95b 	bl	8001a24 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000774:	f000 f8ec 	bl	8000950 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	37c0      	adds	r7, #192	@ 0xc0
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_UART7_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <MX_UART7_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_UART7_Init+0x90>)
 800078c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000790:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_UART7_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_UART7_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_UART7_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_UART7_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_UART7_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_UART7_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_UART7_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_UART7_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <MX_UART7_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_UART7_Init+0x90>)
 80007ca:	f002 fe37 	bl	800343c <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f8bc 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_UART7_Init+0x90>)
 80007dc:	f003 fcfb 	bl	80041d6 <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f8b3 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <MX_UART7_Init+0x90>)
 80007ee:	f003 fd30 	bl	8004252 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f8aa 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_UART7_Init+0x90>)
 80007fe:	f003 fcb1 	bl	8004164 <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f8a2 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000028 	.word	0x24000028
 8000814:	40007800 	.word	0x40007800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOM_CLK_ENABLE();
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000834:	4a2d      	ldr	r2, [pc, #180]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000836:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_GPIO_Init+0xd4>)
 800084a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000858:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <MX_GPIO_Init+0xd4>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOO_CLK_ENABLE();
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <MX_GPIO_Init+0xd4>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_GPIO_Init+0xd4>)
 800087e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000882:	4a1a      	ldr	r2, [pc, #104]	@ (80008ec <MX_GPIO_Init+0xd4>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_GPIO_Init+0xd4>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOM, GPIO_PIN_3|GPIO_PIN_2, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	210c      	movs	r1, #12
 800089a:	4815      	ldr	r0, [pc, #84]	@ (80008f0 <MX_GPIO_Init+0xd8>)
 800089c:	f000 fcc2 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2122      	movs	r1, #34	@ 0x22
 80008a4:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <MX_GPIO_Init+0xdc>)
 80008a6:	f000 fcbd 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM3 PM2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOM, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0xd8>)
 80008c2:	f000 fb59 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PO1 PO5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80008c6:	2322      	movs	r3, #34	@ 0x22
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_GPIO_Init+0xdc>)
 80008de:	f000 fb4b 	bl	8000f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	@ 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58023000 	.word	0x58023000
 80008f4:	58023800 	.word	0x58023800

080008f8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800090a:	f000 fad1 	bl	8000eb0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800090e:	2301      	movs	r3, #1
 8000910:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000912:	2300      	movs	r3, #0
 8000914:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800091a:	231f      	movs	r3, #31
 800091c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800091e:	2387      	movs	r3, #135	@ 0x87
 8000920:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000922:	2300      	movs	r3, #0
 8000924:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000926:	2300      	movs	r3, #0
 8000928:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800092e:	2301      	movs	r3, #1
 8000930:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fad5 	bl	8000eec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000942:	2004      	movs	r0, #4
 8000944:	f000 fa92 	bl	8000e6c <HAL_MPU_Enable>

}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY) != HAL_OK)
 8000960:	2004      	movs	r0, #4
 8000962:	f000 fc77 	bl	8001254 <HAL_PWREx_ConfigSupply>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_MspInit+0x14>
  {
    /* Initialization error */
    Error_Handler();
 800096c:	f7ff fff0 	bl	8000950 <Error_Handler>
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Enable the XSPIM_P1 interface */
  HAL_PWREx_EnableXSPIM1();
 8000970:	f000 fd0e 	bl	8001390 <HAL_PWREx_EnableXSPIM1>

  /* Enable USB Voltage detector */
  if(HAL_PWREx_EnableUSBVoltageDetector() != HAL_OK)
 8000974:	f000 fce8 	bl	8001348 <HAL_PWREx_EnableUSBVoltageDetector>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_MspInit+0x26>
  {
   /* Initialization error */
   Error_Handler();
 800097e:	f7ff ffe7 	bl	8000950 <Error_Handler>
  }

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0ac      	sub	sp, #176	@ 0xb0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	2284      	movs	r2, #132	@ 0x84
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fcdf 	bl	800436c <memset>
  if(huart->Instance==UART7)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a34      	ldr	r2, [pc, #208]	@ (8000a84 <HAL_UART_MspInit+0xfc>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d161      	bne.n	8000a7c <HAL_UART_MspInit+0xf4>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80009b8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fe33 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80009d4:	f7ff ffbc 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 80009da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009de:	4a2a      	ldr	r2, [pc, #168]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 80009e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80009e4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 80009ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 80009f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f8:	4a23      	ldr	r2, [pc, #140]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 8000a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a12:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_UART_MspInit+0x100>)
 8000a1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a26:	2308      	movs	r3, #8
 8000a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <HAL_UART_MspInit+0x104>)
 8000a4c:	f000 fa94 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <HAL_UART_MspInit+0x108>)
 8000a78:	f000 fa7e 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	37b0      	adds	r7, #176	@ 0xb0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40007800 	.word	0x40007800
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020400 	.word	0x58020400
 8000a90:	58021000 	.word	0x58021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f897 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <SystemInit+0x24>)
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <SystemInit+0x28>)
 8000afc:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x24>)
 8000b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <SystemInit+0x24>)
 8000b06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	08000000 	.word	0x08000000

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b24:	f7ff ffe6 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	@ (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f003 fc15 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fd45 	bl	80005e0 <main>

08000b56 <LoopForever>:

LoopForever:
  b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   r0, =_estack
 8000b58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b60:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000b64:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 8000b68:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8000b6c:	240000c8 	.word	0x240000c8

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>

08000b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f943 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f80e 	bl	8000ba4 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e001      	b.n	8000b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b94:	f7ff fee2 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d023      	beq.n	8000c00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_InitTick+0x70>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_InitTick+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f93f 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10f      	bne.n	8000bfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d809      	bhi.n	8000bf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f919 	bl	8000e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0x74>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e004      	b.n	8000c04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e001      	b.n	8000c04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24000008 	.word	0x24000008
 8000c14:	24000000 	.word	0x24000000
 8000c18:	24000004 	.word	0x24000004

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000008 	.word	0x24000008
 8000c40:	240000c4 	.word	0x240000c4

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	240000c4 	.word	0x240000c4

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	05fa0000 	.word	0x05fa0000

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb2 	bl	8000dc4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8000e74:	f3bf 8f5f 	dmb	sy
}
 8000e78:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_MPU_Enable+0x3c>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MPU_Enable+0x40>)
 8000e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e88:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MPU_Enable+0x40>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e96:	f3bf 8f6f 	isb	sy
}
 8000e9a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed90 	.word	0xe000ed90
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8000eb4:	f3bf 8f5f 	dmb	sy
}
 8000eb8:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_MPU_Disable+0x34>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <HAL_MPU_Disable+0x34>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_MPU_Disable+0x38>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	e000ed90 	.word	0xe000ed90

08000eec <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	785a      	ldrb	r2, [r3, #1]
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000efa:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
 8000f20:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7adb      	ldrb	r3, [r3, #11]
 8000f26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f28:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7a9b      	ldrb	r3, [r3, #10]
 8000f2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000f30:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7b5b      	ldrb	r3, [r3, #13]
 8000f36:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000f38:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7b9b      	ldrb	r3, [r3, #14]
 8000f3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000f40:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7bdb      	ldrb	r3, [r3, #15]
 8000f46:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000f48:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7a5b      	ldrb	r3, [r3, #9]
 8000f4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000f50:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7a1b      	ldrb	r3, [r3, #8]
 8000f56:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000f58:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000f62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f64:	6113      	str	r3, [r2, #16]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed90 	.word	0xe000ed90

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e139      	b.n	80011fc <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 812b 	beq.w	80011f6 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8085 	beq.w	80011f6 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80010ec:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	334c      	adds	r3, #76	@ 0x4c
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0a9a      	lsrs	r2, r3, #10
 8001114:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8001116:	4013      	ands	r3, r2
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001128:	493c      	ldr	r1, [pc, #240]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	334c      	adds	r3, #76	@ 0x4c
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	f47f aebe 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	58000400 	.word	0x58000400
 8001220:	0029ff7f 	.word	0x0029ff7f

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001240:	e002      	b.n	8001248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b06      	cmp	r3, #6
 8001266:	d00a      	beq.n	800127e <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d001      	beq.n	800127a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e038      	b.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e036      	b.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f023 021f 	bic.w	r2, r3, #31
 8001286:	491b      	ldr	r1, [pc, #108]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4313      	orrs	r3, r2
 800128c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800128e:	f7ff fcd9 	bl	8000c44 <HAL_GetTick>
 8001292:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001294:	e009      	b.n	80012aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001296:	f7ff fcd5 	bl	8000c44 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a4:	d901      	bls.n	80012aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e020      	b.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0ef      	beq.n	8001296 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b1e      	cmp	r3, #30
 80012ba:	d002      	beq.n	80012c2 <HAL_PWREx_ConfigSupply+0x6e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b1d      	cmp	r3, #29
 80012c0:	d113      	bne.n	80012ea <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 80012c2:	f7ff fcbf 	bl	8000c44 <HAL_GetTick>
 80012c6:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 80012c8:	e009      	b.n	80012de <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012ca:	f7ff fcbb 	bl	8000c44 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012d8:	d901      	bls.n	80012de <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e006      	b.n	80012ec <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_PWREx_ConfigSupply+0xa0>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ef      	beq.n	80012ca <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	58024800 	.word	0x58024800

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f023 0201 	bic.w	r2, r3, #1
 8001308:	490e      	ldr	r1, [pc, #56]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff fc98 	bl	8000c44 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001316:	e009      	b.n	800132c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001318:	f7ff fc94 	bl	8000c44 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001326:	d901      	bls.n	800132c <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e006      	b.n	800133a <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ef      	beq.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	58024800 	.word	0x58024800

08001348 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB voltage detector */
  SET_BIT(PWR->CSR2, PWR_CSR2_USB33DEN);
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001354:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001358:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135a:	f7ff fc73 	bl	8000c44 <HAL_GetTick>
 800135e:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001360:	e009      	b.n	8001376 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001362:	f7ff fc6f 	bl	8000c44 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001370:	d901      	bls.n	8001376 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e006      	b.n	8001384 <HAL_PWREx_EnableUSBVoltageDetector+0x3c>
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0ef      	beq.n	8001362 <HAL_PWREx_EnableUSBVoltageDetector+0x1a>
    }
  }
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024800 	.word	0x58024800

08001390 <HAL_PWREx_EnableXSPIM1>:
  * @note   The XSPIM_P1 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM1(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM1);
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_PWREx_EnableXSPIM1+0x1c>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_PWREx_EnableXSPIM1+0x1c>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	58024800 	.word	0x58024800

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e328      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4b97      	ldr	r3, [pc, #604]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013ca:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013cc:	4b94      	ldr	r3, [pc, #592]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 80013d6:	4b92      	ldr	r3, [pc, #584]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 80013de:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 809c 	beq.w	8001526 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x50>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 808e 	bne.w	8001526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e302      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x76>
 8001418:	4b81      	ldr	r3, [pc, #516]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a80      	ldr	r2, [pc, #512]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800141e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e058      	b.n	80014d8 <HAL_RCC_OscConfig+0x128>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0xa4>
 800142e:	4b7c      	ldr	r3, [pc, #496]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7b      	ldr	r2, [pc, #492]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b79      	ldr	r3, [pc, #484]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a78      	ldr	r2, [pc, #480]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001440:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b76      	ldr	r3, [pc, #472]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a75      	ldr	r2, [pc, #468]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e041      	b.n	80014d8 <HAL_RCC_OscConfig+0x128>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800145e:	4b70      	ldr	r3, [pc, #448]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6f      	ldr	r2, [pc, #444]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b6d      	ldr	r3, [pc, #436]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6c      	ldr	r2, [pc, #432]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001470:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a69      	ldr	r2, [pc, #420]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e029      	b.n	80014d8 <HAL_RCC_OscConfig+0x128>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 800148c:	d112      	bne.n	80014b4 <HAL_RCC_OscConfig+0x104>
 800148e:	4b64      	ldr	r3, [pc, #400]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a63      	ldr	r2, [pc, #396]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b61      	ldr	r3, [pc, #388]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a60      	ldr	r2, [pc, #384]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e011      	b.n	80014d8 <HAL_RCC_OscConfig+0x128>
 80014b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a59      	ldr	r2, [pc, #356]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b57      	ldr	r3, [pc, #348]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a56      	ldr	r2, [pc, #344]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b54      	ldr	r3, [pc, #336]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a53      	ldr	r2, [pc, #332]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014d2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fbb4 	bl	8000c44 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fbac 	bl	8000c44 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e28c      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x138>
 8001506:	e00e      	b.n	8001526 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb9c 	bl	8000c44 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e27c      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 809e 	beq.w	8001670 <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x196>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d047      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d144      	bne.n	80015d0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e260      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 8001552:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0318 	and.w	r3, r3, #24
 800155a:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_OscConfig+0x1c6>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e24e      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0219 	bic.w	r2, r3, #25
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <HAL_RCC_OscConfig+0x274>)
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_RCC_OscConfig+0x278>)
 80015a4:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fafa 	bl	8000ba4 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e22c      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	061b      	lsls	r3, r3, #24
 80015c8:	4915      	ldr	r1, [pc, #84]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
 80015ce:	e04f      	b.n	8001670 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d032      	beq.n	800163e <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 0219 	bic.w	r2, r3, #25
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb1e 	bl	8000c44 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160a:	e011      	b.n	8001630 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800160c:	f7ff fb1a 	bl	8000c44 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d90a      	bls.n	8001630 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1fa      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
 800161e:	bf00      	nop
 8001620:	58024400 	.word	0x58024400
 8001624:	03d09000 	.word	0x03d09000
 8001628:	24000000 	.word	0x24000000
 800162c:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001630:	4b95      	ldr	r3, [pc, #596]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e7      	beq.n	800160c <HAL_RCC_OscConfig+0x25c>
 800163c:	e018      	b.n	8001670 <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a91      	ldr	r2, [pc, #580]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fafb 	bl	8000c44 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001652:	f7ff faf7 	bl	8000c44 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1d7      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001664:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	d045      	beq.n	8001708 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x2de>
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d138      	bne.n	8001708 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1bc      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d019      	beq.n	80016d6 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016a2:	4b79      	ldr	r3, [pc, #484]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a78      	ldr	r2, [pc, #480]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fac9 	bl	8000c44 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80016b6:	f7ff fac5 	bl	8000c44 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a5      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80016c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x306>
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6b      	ldr	r2, [pc, #428]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff faaf 	bl	8000c44 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80016ea:	f7ff faab 	bl	8000c44 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e18b      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80016fc:	4b62      	ldr	r3, [pc, #392]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d036      	beq.n	8001782 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b5a      	ldr	r3, [pc, #360]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001720:	4a59      	ldr	r2, [pc, #356]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fa8c 	bl	8000c44 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001730:	f7ff fa88 	bl	8000c44 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e168      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001742:	4b51      	ldr	r3, [pc, #324]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x380>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001754:	4a4c      	ldr	r2, [pc, #304]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa72 	bl	8000c44 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001764:	f7ff fa6e 	bl	8000c44 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e14e      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001776:	4b44      	ldr	r3, [pc, #272]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b00      	cmp	r3, #0
 800178c:	d036      	beq.n	80017fc <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d019      	beq.n	80017ca <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001796:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fa4f 	bl	8000c44 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80017aa:	f7ff fa4b 	bl	8000c44 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e12b      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x3fa>
 80017c8:	e018      	b.n	80017fc <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80017d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa35 	bl	8000c44 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80017de:	f7ff fa31 	bl	8000c44 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e111      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 809b 	beq.w	8001940 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_RCC_OscConfig+0x4dc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_RCC_OscConfig+0x4dc>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x47c>
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	e05a      	b.n	80018e2 <HAL_RCC_OscConfig+0x532>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x4aa>
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6713      	str	r3, [r2, #112]	@ 0x70
 8001858:	e043      	b.n	80018e2 <HAL_RCC_OscConfig+0x532>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x4e0>
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	@ 0x70
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001878:	6713      	str	r3, [r2, #112]	@ 0x70
 800187a:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187e:	4a02      	ldr	r2, [pc, #8]	@ (8001888 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	@ 0x70
 8001886:	e02c      	b.n	80018e2 <HAL_RCC_OscConfig+0x532>
 8001888:	58024400 	.word	0x58024400
 800188c:	58024800 	.word	0x58024800
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b85      	cmp	r3, #133	@ 0x85
 8001896:	d112      	bne.n	80018be <HAL_RCC_OscConfig+0x50e>
 8001898:	4b60      	ldr	r3, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189c:	4a5f      	ldr	r2, [pc, #380]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a8:	4a5c      	ldr	r2, [pc, #368]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	4a59      	ldr	r2, [pc, #356]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80018bc:	e011      	b.n	80018e2 <HAL_RCC_OscConfig+0x532>
 80018be:	4b57      	ldr	r3, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c2:	4a56      	ldr	r2, [pc, #344]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ca:	4b54      	ldr	r3, [pc, #336]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a53      	ldr	r2, [pc, #332]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d6:	4b51      	ldr	r3, [pc, #324]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018da:	4a50      	ldr	r2, [pc, #320]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80018dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f9ab 	bl	8000c44 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f9a7 	bl	8000c44 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e085      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001908:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ee      	beq.n	80018f2 <HAL_RCC_OscConfig+0x542>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f995 	bl	8000c44 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f991 	bl	8000c44 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e06f      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d042      	beq.n	80019ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b18      	cmp	r3, #24
 800194c:	d131      	bne.n	80019b2 <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e05c      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 800195a:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001964:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d02e      	beq.n	80019ce <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 8001970:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800197c:	f7ff f962 	bl	8000c44 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001982:	bf00      	nop
 8001984:	f7ff f95e 	bl	8000c44 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4293      	cmp	r3, r2
 800198e:	d0f9      	beq.n	8001984 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 8001992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001994:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <HAL_RCC_OscConfig+0x670>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800199c:	00d2      	lsls	r2, r2, #3
 800199e:	491f      	ldr	r1, [pc, #124]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <HAL_RCC_OscConfig+0x66c>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019b0:	e00d      	b.n	80019ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3324      	adds	r3, #36	@ 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 fbd6 	bl	8002170 <RCC_PLL_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e022      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	334c      	adds	r3, #76	@ 0x4c
 80019da:	4619      	mov	r1, r3
 80019dc:	2001      	movs	r0, #1
 80019de:	f000 fbc7 	bl	8002170 <RCC_PLL_Config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00e      	beq.n	8001a12 <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3374      	adds	r3, #116	@ 0x74
 8001a00:	4619      	mov	r1, r3
 8001a02:	2002      	movs	r0, #2
 8001a04:	f000 fbb4 	bl	8002170 <RCC_PLL_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	ffff0007 	.word	0xffff0007

08001a24 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e182      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b8a      	ldr	r3, [pc, #552]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b87      	ldr	r3, [pc, #540]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a4e:	4985      	ldr	r1, [pc, #532]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b83      	ldr	r3, [pc, #524]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e16a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d010      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	4b7b      	ldr	r3, [pc, #492]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d908      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a84:	4b78      	ldr	r3, [pc, #480]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f023 0207 	bic.w	r2, r3, #7
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4975      	ldr	r1, [pc, #468]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d010      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d908      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	496a      	ldr	r1, [pc, #424]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	4b64      	ldr	r3, [pc, #400]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d908      	bls.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ae0:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	495e      	ldr	r1, [pc, #376]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	4b59      	ldr	r3, [pc, #356]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d908      	bls.n	8001b20 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001b0e:	4b56      	ldr	r3, [pc, #344]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4953      	ldr	r1, [pc, #332]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4b4d      	ldr	r3, [pc, #308]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d908      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f023 020f 	bic.w	r2, r3, #15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4947      	ldr	r1, [pc, #284]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d055      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b5a:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f023 020f 	bic.w	r2, r3, #15
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4940      	ldr	r1, [pc, #256]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b74:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d121      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0dc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d115      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ba4:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0c4      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0bc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4925      	ldr	r1, [pc, #148]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd6:	f7ff f835 	bl	8000c44 <HAL_GetTick>
 8001bda:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7ff f831 	bl	8000c44 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0a4      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d1eb      	bne.n	8001bde <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d010      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d208      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f023 020f 	bic.w	r2, r3, #15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	490e      	ldr	r1, [pc, #56]	@ (8001c68 <HAL_RCC_ClockConfig+0x244>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d214      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c4a:	4906      	ldr	r1, [pc, #24]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <HAL_RCC_ClockConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e06c      	b.n	8001d3e <HAL_RCC_ClockConfig+0x31a>
 8001c64:	52002000 	.word	0x52002000
 8001c68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d208      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f023 0207 	bic.w	r2, r3, #7
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	492c      	ldr	r1, [pc, #176]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d208      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4921      	ldr	r1, [pc, #132]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d208      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4915      	ldr	r1, [pc, #84]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d208      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	490a      	ldr	r1, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x324>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8001d24:	f000 f816 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_RCC_ClockConfig+0x328>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_RCC_ClockConfig+0x32c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ff36 	bl	8000ba4 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	24000000 	.word	0x24000000
 8001d50:	24000004 	.word	0x24000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b08b      	sub	sp, #44	@ 0x2c
 8001d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5a:	4baa      	ldr	r3, [pc, #680]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	f200 8136 	bhi.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x280>
 8001d68:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001dd5 	.word	0x08001dd5
 8001d74:	08001fd5 	.word	0x08001fd5
 8001d78:	08001fd5 	.word	0x08001fd5
 8001d7c:	08001fd5 	.word	0x08001fd5
 8001d80:	08001fd5 	.word	0x08001fd5
 8001d84:	08001fd5 	.word	0x08001fd5
 8001d88:	08001fd5 	.word	0x08001fd5
 8001d8c:	08001fd5 	.word	0x08001fd5
 8001d90:	08001dfb 	.word	0x08001dfb
 8001d94:	08001fd5 	.word	0x08001fd5
 8001d98:	08001fd5 	.word	0x08001fd5
 8001d9c:	08001fd5 	.word	0x08001fd5
 8001da0:	08001fd5 	.word	0x08001fd5
 8001da4:	08001fd5 	.word	0x08001fd5
 8001da8:	08001fd5 	.word	0x08001fd5
 8001dac:	08001fd5 	.word	0x08001fd5
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08001fd5 	.word	0x08001fd5
 8001db8:	08001fd5 	.word	0x08001fd5
 8001dbc:	08001fd5 	.word	0x08001fd5
 8001dc0:	08001fd5 	.word	0x08001fd5
 8001dc4:	08001fd5 	.word	0x08001fd5
 8001dc8:	08001fd5 	.word	0x08001fd5
 8001dcc:	08001fd5 	.word	0x08001fd5
 8001dd0:	08001e07 	.word	0x08001e07
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001dd4:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001de0:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	4a87      	ldr	r2, [pc, #540]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8001df2:	e0f2      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	e0ef      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001dfa:	4b84      	ldr	r3, [pc, #528]	@ (800200c <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001dfc:	623b      	str	r3, [r7, #32]
      break;
 8001dfe:	e0ec      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e00:	4b83      	ldr	r3, [pc, #524]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	e0e9      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8001e10:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e1a:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8001e26:	4b77      	ldr	r3, [pc, #476]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80c2 	beq.w	8001fce <HAL_RCC_GetSysClockFreq+0x27a>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d064      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1c6>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	f200 8083 	bhi.w	8001f5e <HAL_RCC_GetSysClockFreq+0x20a>
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x112>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d038      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x182>
 8001e64:	e07b      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001e66:	4b67      	ldr	r3, [pc, #412]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d02d      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001e72:	4b64      	ldr	r3, [pc, #400]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	4a62      	ldr	r2, [pc, #392]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9c:	4b59      	ldr	r3, [pc, #356]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eac:	ed97 6a04 	vldr	s12, [r7, #16]
 8001eb0:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8002014 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8001ecc:	e069      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed4:	e065      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee0:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002018 <HAL_RCC_GetSysClockFreq+0x2c4>
 8001ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee8:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef8:	ed97 6a04 	vldr	s12, [r7, #16]
 8001efc:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002014 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001f18:	e043      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f24:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800201c <HAL_RCC_GetSysClockFreq+0x2c8>
 8001f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f2c:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001f40:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002014 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001f5c:	e021      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f68:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002018 <HAL_RCC_GetSysClockFreq+0x2c4>
 8001f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f80:	ed97 6a04 	vldr	s12, [r7, #16]
 8001f84:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002014 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8001fa0:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	0a5b      	lsrs	r3, r3, #9
 8001fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fac:	3301      	adds	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001fcc:	e005      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001fd6:	623b      	str	r3, [r7, #32]
      break;
 8001fd8:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b07      	cmp	r3, #7
 8001fe8:	d905      	bls.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3b07      	subs	r3, #7
 8001fee:	6a3a      	ldr	r2, [r7, #32]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	372c      	adds	r7, #44	@ 0x2c
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	58024400 	.word	0x58024400
 8002008:	03d09000 	.word	0x03d09000
 800200c:	003d0900 	.word	0x003d0900
 8002010:	016e3600 	.word	0x016e3600
 8002014:	46000000 	.word	0x46000000
 8002018:	4a742400 	.word	0x4a742400
 800201c:	4bb71b00 	.word	0x4bb71b00

08002020 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8002026:	4a10      	ldr	r2, [pc, #64]	@ (8002068 <HAL_RCC_GetHCLKFreq+0x48>)
 8002028:	463b      	mov	r3, r7
 800202a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8002032:	f7ff fe8f 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8002036:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCC_GetHCLKFreq+0x4c>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b07      	cmp	r3, #7
 8002046:	d909      	bls.n	800205c <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3b08      	subs	r3, #8
 800204c:	3310      	adds	r3, #16
 800204e:	443b      	add	r3, r7
 8002050:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002054:	461a      	mov	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	40d3      	lsrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	080043dc 	.word	0x080043dc
 800206c:	58024400 	.word	0x58024400

08002070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002076:	f7ff ffd3 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 800207a:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x34>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d905      	bls.n	8002098 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	3b03      	subs	r3, #3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	58024400 	.word	0x58024400

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80020ae:	f7ff ffb7 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 80020b2:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x34>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d905      	bls.n	80020d2 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400

080020e0 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80020e6:	f7ff ff9b 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 80020ea:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_GetPCLK4Freq+0x34>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d905      	bls.n	800210a <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3b03      	subs	r3, #3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800210a:	687b      	ldr	r3, [r7, #4]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	58024400 	.word	0x58024400

08002118 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_RCC_GetPLL2QFreq+0x28>)
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002128:	3301      	adds	r3, #1
 800212a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 800212c:	f000 f976 	bl	800241c <RCC_PLL2_GetVCOOutputFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	58024400 	.word	0x58024400

08002144 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_RCC_GetPLL3QFreq+0x28>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002154:	3301      	adds	r3, #1
 8002156:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8002158:	f000 f9e6 	bl	8002528 <RCC_PLL3_GetVCOOutputFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	58024400 	.word	0x58024400

08002170 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	00da      	lsls	r2, r3, #3
 8002184:	4b9a      	ldr	r3, [pc, #616]	@ (80023f0 <RCC_PLL_Config+0x280>)
 8002186:	4413      	add	r3, r2
 8002188:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	4b99      	ldr	r3, [pc, #612]	@ (80023f4 <RCC_PLL_Config+0x284>)
 8002190:	4413      	add	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002194:	4b98      	ldr	r3, [pc, #608]	@ (80023f8 <RCC_PLL_Config+0x288>)
 8002196:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 80021b4:	4b90      	ldr	r3, [pc, #576]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	498c      	ldr	r1, [pc, #560]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80021cc:	f7fe fd3a 	bl	8000c44 <HAL_GetTick>
 80021d0:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80021d2:	e008      	b.n	80021e6 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fd36 	bl	8000c44 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b32      	cmp	r3, #50	@ 0x32
 80021e0:	d901      	bls.n	80021e6 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0ff      	b.n	80023e6 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 80021e6:	4b84      	ldr	r3, [pc, #528]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1eb      	bne.n	80021d4 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b02      	cmp	r3, #2
 8002202:	f040 80dd 	bne.w	80023c0 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002212:	4b79      	ldr	r3, [pc, #484]	@ (80023f8 <RCC_PLL_Config+0x288>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	4a77      	ldr	r2, [pc, #476]	@ (80023fc <RCC_PLL_Config+0x28c>)
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
 8002224:	e007      	b.n	8002236 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d102      	bne.n	8002232 <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 800222c:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <RCC_PLL_Config+0x290>)
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002230:	e001      	b.n	8002236 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 8002232:	4b74      	ldr	r3, [pc, #464]	@ (8002404 <RCC_PLL_Config+0x294>)
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	4a70      	ldr	r2, [pc, #448]	@ (8002408 <RCC_PLL_Config+0x298>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d302      	bcc.n	8002250 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 800224a:	2318      	movs	r3, #24
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
 800224e:	e00f      	b.n	8002270 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	4a6e      	ldr	r2, [pc, #440]	@ (800240c <RCC_PLL_Config+0x29c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d902      	bls.n	800225e <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002258:	2310      	movs	r3, #16
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
 800225c:	e008      	b.n	8002270 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	4a6b      	ldr	r2, [pc, #428]	@ (8002410 <RCC_PLL_Config+0x2a0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d902      	bls.n	800226c <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8002266:	2308      	movs	r3, #8
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
 800226a:	e001      	b.n	8002270 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 800226c:	2302      	movs	r3, #2
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002284:	4b5c      	ldr	r3, [pc, #368]	@ (80023f8 <RCC_PLL_Config+0x288>)
 8002286:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	f043 0303 	orr.w	r3, r3, #3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	3304      	adds	r3, #4
 80022a6:	4099      	lsls	r1, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	4952      	ldr	r1, [pc, #328]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 80022b2:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e090      	b.n	80023e6 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 80022c4:	4b4c      	ldr	r3, [pc, #304]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80022c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	221b      	movs	r2, #27
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	ea01 0203 	and.w	r2, r1, r3
 80022e0:	4945      	ldr	r1, [pc, #276]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	4313      	orrs	r3, r2
 80022e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	431a      	orrs	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	3b01      	subs	r3, #1
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	431a      	orrs	r2, r3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	3b01      	subs	r3, #1
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	431a      	orrs	r2, r3
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <RCC_PLL_Config+0x288>)
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	4a32      	ldr	r2, [pc, #200]	@ (80023f8 <RCC_PLL_Config+0x288>)
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01c      	beq.n	8002378 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	00da      	lsls	r2, r3, #3
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <RCC_PLL_Config+0x2a4>)
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <RCC_PLL_Config+0x2a8>)
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002354:	00d2      	lsls	r2, r2, #3
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 800235c:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <RCC_PLL_Config+0x288>)
 800235e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <RCC_PLL_Config+0x288>)
 8002374:	430b      	orrs	r3, r1
 8002376:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <RCC_PLL_Config+0x288>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	491b      	ldr	r1, [pc, #108]	@ (80023f8 <RCC_PLL_Config+0x288>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238e:	f7fe fc59 	bl	8000c44 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002394:	e008      	b.n	80023a8 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002396:	f7fe fc55 	bl	8000c44 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b32      	cmp	r3, #50	@ 0x32
 80023a2:	d901      	bls.n	80023a8 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e01e      	b.n	80023e6 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0eb      	beq.n	8002396 <RCC_PLL_Config+0x226>
 80023be:	e010      	b.n	80023e2 <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80023c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3304      	adds	r3, #4
 80023ca:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	f043 0303 	orr.w	r3, r3, #3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	4a07      	ldr	r2, [pc, #28]	@ (80023f8 <RCC_PLL_Config+0x288>)
 80023dc:	f043 0303 	orr.w	r3, r3, #3
 80023e0:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 80023e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	58024430 	.word	0x58024430
 80023f4:	580244c0 	.word	0x580244c0
 80023f8:	58024400 	.word	0x58024400
 80023fc:	03d09000 	.word	0x03d09000
 8002400:	016e3600 	.word	0x016e3600
 8002404:	003d0900 	.word	0x003d0900
 8002408:	007a1200 	.word	0x007a1200
 800240c:	003d08ff 	.word	0x003d08ff
 8002410:	001e847f 	.word	0x001e847f
 8002414:	58024434 	.word	0x58024434
 8002418:	ffff0007 	.word	0xffff0007

0800241c <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002422:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8002428:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	0b1b      	lsrs	r3, r3, #12
 8002432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002436:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243e:	3301      	adds	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	e05c      	b.n	8002506 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8002458:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e001      	b.n	800246a <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d019      	beq.n	80024a8 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002474:	2b02      	cmp	r3, #2
 8002476:	d81d      	bhi.n	80024b4 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <RCC_PLL2_GetVCOOutputFreq+0x66>
 800247c:	2b01      	cmp	r3, #1
 800247e:	d016      	beq.n	80024ae <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002480:	e018      	b.n	80024b4 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800248e:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80024a0:	e00b      	b.n	80024ba <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      break;
 80024a6:	e008      	b.n	80024ba <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <RCC_PLL2_GetVCOOutputFreq+0x100>)
 80024aa:	61fb      	str	r3, [r7, #28]
      break;
 80024ac:	e005      	b.n	80024ba <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 80024b0:	61fb      	str	r3, [r7, #28]
      break;
 80024b2:	e002      	b.n	80024ba <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
      break;
 80024b8:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80024e6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002524 <RCC_PLL2_GetVCOOutputFreq+0x108>
 80024ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80024fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80024fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002502:	ee17 3a90 	vmov	r3, s15
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	58024400 	.word	0x58024400
 8002518:	03d09000 	.word	0x03d09000
 800251c:	016e3600 	.word	0x016e3600
 8002520:	003d0900 	.word	0x003d0900
 8002524:	46000000 	.word	0x46000000

08002528 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8002534:	4b3a      	ldr	r3, [pc, #232]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	0d1b      	lsrs	r3, r3, #20
 800253e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002542:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	e05c      	b.n	8002612 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8002558:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8002564:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e001      	b.n	8002576 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d019      	beq.n	80025b4 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d81d      	bhi.n	80025c0 <RCC_PLL3_GetVCOOutputFreq+0x98>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <RCC_PLL3_GetVCOOutputFreq+0x66>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d016      	beq.n	80025ba <RCC_PLL3_GetVCOOutputFreq+0x92>
 800258c:	e018      	b.n	80025c0 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800258e:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80025ac:	e00b      	b.n	80025c6 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      break;
 80025b2:	e008      	b.n	80025c6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 80025b6:	61fb      	str	r3, [r7, #28]
      break;
 80025b8:	e005      	b.n	80025c6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <RCC_PLL3_GetVCOOutputFreq+0x104>)
 80025bc:	61fb      	str	r3, [r7, #28]
      break;
 80025be:	e002      	b.n	80025c6 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
      break;
 80025c4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80025f2:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002630 <RCC_PLL3_GetVCOOutputFreq+0x108>
 80025f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002606:	edd7 7a01 	vldr	s15, [r7, #4]
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 3a90 	vmov	r3, s15
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	58024400 	.word	0x58024400
 8002624:	03d09000 	.word	0x03d09000
 8002628:	016e3600 	.word	0x016e3600
 800262c:	003d0900 	.word	0x003d0900
 8002630:	46000000 	.word	0x46000000

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002640:	2300      	movs	r3, #0
 8002642:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8081 	beq.w	8002754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002652:	4b8c      	ldr	r3, [pc, #560]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265a:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d029      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d022      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4b85      	ldr	r3, [pc, #532]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a84      	ldr	r2, [pc, #528]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267c:	4b82      	ldr	r3, [pc, #520]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	e013      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268e:	4b7d      	ldr	r3, [pc, #500]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002696:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8002698:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a79      	ldr	r2, [pc, #484]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a4:	4b77      	ldr	r3, [pc, #476]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a76      	ldr	r2, [pc, #472]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 80026b0:	4a74      	ldr	r2, [pc, #464]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d149      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c4:	d115      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fabd 	bl	8000c44 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026cc:	e00b      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fab9 	bl	8000c44 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d902      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	75fb      	strb	r3, [r7, #23]
            break;
 80026e4:	e005      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	4b67      	ldr	r3, [pc, #412]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ed      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d128      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026fc:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002704:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002710:	0919      	lsrs	r1, r3, #4
 8002712:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002714:	400b      	ands	r3, r1
 8002716:	495b      	ldr	r1, [pc, #364]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
 800271c:	e005      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800271e:	4b59      	ldr	r3, [pc, #356]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4a58      	ldr	r2, [pc, #352]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002724:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002728:	6113      	str	r3, [r2, #16]
 800272a:	4b56      	ldr	r3, [pc, #344]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800272c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002736:	4953      	ldr	r1, [pc, #332]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002738:	4313      	orrs	r3, r2
 800273a:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 800273c:	4b51      	ldr	r3, [pc, #324]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a50      	ldr	r2, [pc, #320]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
 8002748:	e004      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	75bb      	strb	r3, [r7, #22]
 800274e:	e001      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d030      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d819      	bhi.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	080027a3 	.word	0x080027a3
 8002774:	08002781 	.word	0x08002781
 8002778:	0800278f 	.word	0x0800278f
 800277c:	080027a3 	.word	0x080027a3
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002780:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	4a3f      	ldr	r2, [pc, #252]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800278a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800278c:	e00a      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 800278e:	4b3d      	ldr	r3, [pc, #244]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	4a3c      	ldr	r2, [pc, #240]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002798:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 800279a:	e003      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
        break;
 80027a0:	e000      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 80027a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4933      	ldr	r1, [pc, #204]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80027bc:	e001      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d00c      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d811      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d10d      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80027e2:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80027ee:	e00a      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80027f0:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	4a23      	ldr	r2, [pc, #140]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
        break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	491a      	ldr	r1, [pc, #104]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800281a:	4313      	orrs	r3, r2
 800281c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d031      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b80      	cmp	r3, #128	@ 0x80
 8002836:	d00c      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002838:	2b80      	cmp	r3, #128	@ 0x80
 800283a:	d811      	bhi.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d10d      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	4a0e      	ldr	r2, [pc, #56]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800284a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800284e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8002850:	e00a      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	4a0b      	ldr	r2, [pc, #44]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
        break;
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8002866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d110      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4902      	ldr	r1, [pc, #8]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800287c:	4313      	orrs	r3, r2
 800287e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002880:	e008      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400
 8002888:	58024800 	.word	0x58024800
 800288c:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80028a0:	4b93      	ldr	r3, [pc, #588]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4990      	ldr	r1, [pc, #576]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d026      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d007      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80028ca:	e00d      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80028cc:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	4a87      	ldr	r2, [pc, #540]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80028d8:	e009      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80028da:	4b85      	ldr	r3, [pc, #532]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	4a84      	ldr	r2, [pc, #528]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80028e6:	e002      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
        break;
 80028ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 80028f4:	4b7e      	ldr	r3, [pc, #504]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f8:	f023 0204 	bic.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	497b      	ldr	r1, [pc, #492]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02e      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002920:	d019      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002926:	d813      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002930:	d007      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002932:	e00d      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002934:	4b6e      	ldr	r3, [pc, #440]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	4a6d      	ldr	r2, [pc, #436]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8002940:	e00a      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002942:	4b6b      	ldr	r3, [pc, #428]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	4a6a      	ldr	r2, [pc, #424]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002948:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800294c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800294e:	e003      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
        break;
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800295e:	4b64      	ldr	r3, [pc, #400]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4961      	ldr	r1, [pc, #388]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002970:	e001      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d03f      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800298a:	d02a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800298c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002990:	d824      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002996:	d024      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299c:	d81e      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800299e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029a2:	d01e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80029a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029a8:	d818      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80029aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ae:	d00e      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80029b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029b4:	d812      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80029ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029be:	d10d      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80029c0:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	4a4a      	ldr	r2, [pc, #296]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80029ce:	4b48      	ldr	r3, [pc, #288]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80029d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80029da:	e003      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
        break;
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 80029e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80029ea:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	493e      	ldr	r1, [pc, #248]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80029fc:	e001      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a0e:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4935      	ldr	r1, [pc, #212]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8002a2c:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	492d      	ldr	r1, [pc, #180]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8002a64:	e003      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
        break;
 8002a6a:	e000      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8002a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8002a74:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	491b      	ldr	r1, [pc, #108]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02f      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002aa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002aa6:	d812      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab0:	d10d      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8002ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	4901      	ldr	r1, [pc, #4]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	650b      	str	r3, [r1, #80]	@ 0x50
 8002aee:	e003      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d02c      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b0c:	d017      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b12:	d811      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b18:	d011      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1e:	d80b      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002b2a:	4b97      	ldr	r3, [pc, #604]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	4a96      	ldr	r2, [pc, #600]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8002b36:	e003      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
        break;
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8002b46:	4b90      	ldr	r3, [pc, #576]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	498d      	ldr	r1, [pc, #564]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	650b      	str	r3, [r1, #80]	@ 0x50
 8002b58:	e001      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02c      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b72:	d017      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b78:	d811      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7e:	d011      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b84:	d80b      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002b90:	4b7d      	ldr	r3, [pc, #500]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	4a7c      	ldr	r2, [pc, #496]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002b96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8002ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8002bac:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	4973      	ldr	r1, [pc, #460]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	650b      	str	r3, [r1, #80]	@ 0x50
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d045      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d02a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8002bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bde:	d824      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002be4:	d026      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bea:	d81e      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bf0:	d022      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bf6:	d818      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bfc:	d00e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c02:	d812      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d10d      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c1a:	e010      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	4a59      	ldr	r2, [pc, #356]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c28:	e009      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c2e:	e006      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002c30:	bf00      	nop
 8002c32:	e004      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8002c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c44:	4b50      	ldr	r3, [pc, #320]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c48:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	494d      	ldr	r1, [pc, #308]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	650b      	str	r3, [r1, #80]	@ 0x50
 8002c56:	e001      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d045      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002c70:	d02a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8002c72:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002c76:	d824      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7c:	d026      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x698>
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d81e      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c88:	d022      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8002c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c8e:	d818      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c94:	d00e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c9a:	d812      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002ca6:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	4a37      	ldr	r2, [pc, #220]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002cb2:	e010      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002cc6:	e006      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002cc8:	bf00      	nop
 8002cca:	e004      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002ccc:	bf00      	nop
 8002cce:	e002      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002cd0:	bf00      	nop
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce8:	4927      	ldr	r1, [pc, #156]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	658b      	str	r3, [r1, #88]	@ 0x58
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d047      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d08:	d02a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002d0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d0e:	d824      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d14:	d026      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1a:	d81e      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002d1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d20:	d022      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002d22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d26:	d818      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2c:	d00e      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x718>
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d32:	d812      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x738>
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3c:	d10d      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002d3e:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	4a11      	ldr	r2, [pc, #68]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002d4a:	e010      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d56:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002d58:	e009      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d5e:	e006      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002d60:	bf00      	nop
 8002d62:	e004      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002d64:	bf00      	nop
 8002d66:	e002      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	4901      	ldr	r1, [pc, #4]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	658b      	str	r3, [r1, #88]	@ 0x58
 8002d86:	e003      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d034      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d81d      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de7 	.word	0x08002de7
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dd3 	.word	0x08002dd3
 8002db8:	08002de7 	.word	0x08002de7
 8002dbc:	08002de7 	.word	0x08002de7
 8002dc0:	08002de7 	.word	0x08002de7
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002dc4:	4b91      	ldr	r3, [pc, #580]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	4a90      	ldr	r2, [pc, #576]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	4a8d      	ldr	r2, [pc, #564]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
        break;
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8002de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dee:	4b87      	ldr	r3, [pc, #540]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4984      	ldr	r1, [pc, #528]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	658b      	str	r3, [r1, #88]	@ 0x58
 8002e00:	e001      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002e12:	4b7e      	ldr	r3, [pc, #504]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	4a7d      	ldr	r2, [pc, #500]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d021      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8002e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002e3a:	4b74      	ldr	r3, [pc, #464]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	4a73      	ldr	r2, [pc, #460]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8002e46:	e003      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
        break;
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8002e56:	4b6d      	ldr	r3, [pc, #436]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e62:	496a      	ldr	r1, [pc, #424]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002e68:	e001      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d043      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e82:	d02c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8002e84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e88:	d826      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e8e:	d028      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8002e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e94:	d820      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e9a:	d016      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x896>
 8002e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ea0:	d81a      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eaa:	d007      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x888>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002eae:	4b57      	ldr	r3, [pc, #348]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eba:	e013      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002ebc:	4b53      	ldr	r3, [pc, #332]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002eca:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	4a4f      	ldr	r2, [pc, #316]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ed0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	75fb      	strb	r3, [r7, #23]
        break;
 8002edc:	e002      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8002ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eea:	4b48      	ldr	r3, [pc, #288]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4945      	ldr	r1, [pc, #276]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	654b      	str	r3, [r1, #84]	@ 0x54
 8002efc:	e001      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002f16:	d032      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8002f18:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002f1c:	d82c      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f22:	d02e      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f28:	d826      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002f2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f2e:	d02a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002f30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f34:	d820      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002f36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x936>
 8002f3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f40:	d81a      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f4a:	d007      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x928>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	4a2e      	ldr	r2, [pc, #184]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f5a:	e015      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f68:	e00e      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002f6a:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	4a27      	ldr	r2, [pc, #156]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f76:	e007      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
        break;
 8002f7c:	e004      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f9a:	491c      	ldr	r1, [pc, #112]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	654b      	str	r3, [r1, #84]	@ 0x54
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fba:	d029      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fc0:	d820      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fc6:	d016      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fcc:	d81a      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002fd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8002fd8:	e014      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002fda:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a0b      	ldr	r2, [pc, #44]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fe6:	e014      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002fe8:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	4a07      	ldr	r2, [pc, #28]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ff4:	e00d      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002ff6:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	4a04      	ldr	r2, [pc, #16]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ffc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003000:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003002:	e006      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
        break;
 8003008:	e003      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003018:	4b8e      	ldr	r3, [pc, #568]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003024:	498b      	ldr	r1, [pc, #556]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003026:	4313      	orrs	r3, r2
 8003028:	650b      	str	r3, [r1, #80]	@ 0x50
 800302a:	e001      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d043      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d02c      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d826      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800304c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003050:	d028      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003056:	d820      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800305c:	d016      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800305e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003062:	d81a      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800306c:	d007      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 800306e:	e014      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003070:	4b78      	ldr	r3, [pc, #480]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	4a77      	ldr	r2, [pc, #476]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800307c:	e013      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800307e:	4b75      	ldr	r3, [pc, #468]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	4a74      	ldr	r2, [pc, #464]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800308a:	e00c      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800308c:	4b71      	ldr	r3, [pc, #452]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	4a70      	ldr	r2, [pc, #448]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003096:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003098:	e005      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
        break;
 800309e:	e002      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80030ac:	4b69      	ldr	r3, [pc, #420]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	4966      	ldr	r1, [pc, #408]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	654b      	str	r3, [r1, #84]	@ 0x54
 80030be:	e001      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d03c      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2b40      	cmp	r3, #64	@ 0x40
 80030d6:	d026      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80030d8:	2b40      	cmp	r3, #64	@ 0x40
 80030da:	d821      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80030dc:	2b30      	cmp	r3, #48	@ 0x30
 80030de:	d024      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80030e0:	2b30      	cmp	r3, #48	@ 0x30
 80030e2:	d81d      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d014      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d819      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d007      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80030f4:	e014      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80030f6:	4b57      	ldr	r3, [pc, #348]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003100:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003102:	e013      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003104:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	4a52      	ldr	r2, [pc, #328]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003110:	e00c      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003112:	4b50      	ldr	r3, [pc, #320]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	4a4f      	ldr	r2, [pc, #316]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003118:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800311c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 800311e:	e005      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
        break;
 8003124:	e002      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800312a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003132:	4b48      	ldr	r3, [pc, #288]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003136:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	4945      	ldr	r1, [pc, #276]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003140:	4313      	orrs	r3, r2
 8003142:	650b      	str	r3, [r1, #80]	@ 0x50
 8003144:	e001      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03c      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	2b50      	cmp	r3, #80	@ 0x50
 800315c:	d022      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800315e:	2b50      	cmp	r3, #80	@ 0x50
 8003160:	d81d      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d020      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003166:	2b40      	cmp	r3, #64	@ 0x40
 8003168:	d819      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800316a:	2b30      	cmp	r3, #48	@ 0x30
 800316c:	d01e      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800316e:	2b30      	cmp	r3, #48	@ 0x30
 8003170:	d815      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d00c      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d811      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800317e:	2b10      	cmp	r3, #16
 8003180:	d10d      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	4a33      	ldr	r2, [pc, #204]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800318c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800318e:	e010      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003190:	4b30      	ldr	r3, [pc, #192]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4a2f      	ldr	r2, [pc, #188]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 800319c:	e009      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
        break;
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031b8:	4b26      	ldr	r3, [pc, #152]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	4923      	ldr	r1, [pc, #140]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	654b      	str	r3, [r1, #84]	@ 0x54
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e0:	2b50      	cmp	r3, #80	@ 0x50
 80031e2:	d022      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80031e4:	2b50      	cmp	r3, #80	@ 0x50
 80031e6:	d81d      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80031e8:	2b40      	cmp	r3, #64	@ 0x40
 80031ea:	d020      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d819      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80031f0:	2b30      	cmp	r3, #48	@ 0x30
 80031f2:	d01e      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80031f4:	2b30      	cmp	r3, #48	@ 0x30
 80031f6:	d815      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d00c      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d811      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003204:	2b10      	cmp	r3, #16
 8003206:	d10d      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003208:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003214:	e010      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003216:	4b0f      	ldr	r3, [pc, #60]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	4a0e      	ldr	r2, [pc, #56]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003220:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
        break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800324a:	4902      	ldr	r1, [pc, #8]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800324c:	4313      	orrs	r3, r2
 800324e:	658b      	str	r3, [r1, #88]	@ 0x58
 8003250:	e004      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003252:	bf00      	nop
 8003254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d034      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326c:	2b05      	cmp	r3, #5
 800326e:	d81d      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003270:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	080032b3 	.word	0x080032b3
 800327c:	08003291 	.word	0x08003291
 8003280:	0800329f 	.word	0x0800329f
 8003284:	080032b3 	.word	0x080032b3
 8003288:	080032b3 	.word	0x080032b3
 800328c:	080032b3 	.word	0x080032b3
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003290:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 800329c:	e00a      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800329e:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	4a65      	ldr	r2, [pc, #404]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
        break;
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c6:	495c      	ldr	r1, [pc, #368]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	654b      	str	r3, [r1, #84]	@ 0x54
 80032cc:	e001      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d033      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d81c      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003327 	.word	0x08003327
 80032f0:	08003305 	.word	0x08003305
 80032f4:	08003313 	.word	0x08003313
 80032f8:	08003327 	.word	0x08003327
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003327 	.word	0x08003327
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003304:	4b4c      	ldr	r3, [pc, #304]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	4a4b      	ldr	r2, [pc, #300]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003310:	e00a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003312:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003316:	4a48      	ldr	r2, [pc, #288]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
        break;
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8003326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800332e:	4b42      	ldr	r3, [pc, #264]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	493f      	ldr	r1, [pc, #252]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800333c:	4313      	orrs	r3, r2
 800333e:	650b      	str	r3, [r1, #80]	@ 0x50
 8003340:	e001      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d027      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003360:	d80c      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800336e:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003378:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
        break;
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800338c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	4928      	ldr	r1, [pc, #160]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003398:	4313      	orrs	r3, r2
 800339a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800339c:	e001      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da2c      	bge.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80033b2:	d017      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80033b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80033b8:	d811      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80033ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033be:	d011      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80033c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033c4:	d80b      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80033ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ce:	d106      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80033d0:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
        break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f8:	490f      	ldr	r1, [pc, #60]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80033fe:	e001      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341e:	4906      	ldr	r1, [pc, #24]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003420:	4313      	orrs	r3, r2
 8003422:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58024400 	.word	0x58024400

0800343c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e042      	b.n	80034d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fd fa91 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2224      	movs	r2, #36	@ 0x24
 800346a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fc4c 	bl	8003d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8b3 	bl	80035f8 <UART_SetConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01b      	b.n	80034d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fccb 	bl	8003e68 <UART_CheckIdleState>
 80034d2:	4603      	mov	r3, r0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d17b      	bne.n	80035ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Transmit+0x26>
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e074      	b.n	80035f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2221      	movs	r2, #33	@ 0x21
 8003512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003516:	f7fd fb95 	bl	8000c44 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003534:	d108      	bne.n	8003548 <HAL_UART_Transmit+0x6c>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e003      	b.n	8003550 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003550:	e030      	b.n	80035b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	@ 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fd2d 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e03d      	b.n	80035f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	3302      	adds	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e007      	b.n	80035a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1c8      	bne.n	8003552 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2140      	movs	r1, #64	@ 0x40
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fcf6 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e006      	b.n	80035f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b08c      	sub	sp, #48	@ 0x30
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	431a      	orrs	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	4313      	orrs	r3, r2
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4bb3      	ldr	r3, [pc, #716]	@ (80038f4 <UART_SetConfig+0x2fc>)
 8003628:	4013      	ands	r3, r2
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003630:	430b      	orrs	r3, r1
 8003632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4aa8      	ldr	r2, [pc, #672]	@ (80038f8 <UART_SetConfig+0x300>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003660:	4313      	orrs	r3, r2
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	4ba4      	ldr	r3, [pc, #656]	@ (80038fc <UART_SetConfig+0x304>)
 800366c:	4013      	ands	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	f023 010f 	bic.w	r1, r3, #15
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a9b      	ldr	r2, [pc, #620]	@ (8003900 <UART_SetConfig+0x308>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d131      	bne.n	80036fc <UART_SetConfig+0x104>
 8003698:	4b9a      	ldr	r3, [pc, #616]	@ (8003904 <UART_SetConfig+0x30c>)
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d827      	bhi.n	80036f4 <UART_SetConfig+0xfc>
 80036a4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0xb4>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036c5 	.word	0x080036c5
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036d5 	.word	0x080036d5
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ca:	e0a0      	b.n	800380e <UART_SetConfig+0x216>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d2:	e09c      	b.n	800380e <UART_SetConfig+0x216>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036da:	e098      	b.n	800380e <UART_SetConfig+0x216>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e2:	e094      	b.n	800380e <UART_SetConfig+0x216>
 80036e4:	2320      	movs	r3, #32
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ea:	e090      	b.n	800380e <UART_SetConfig+0x216>
 80036ec:	2340      	movs	r3, #64	@ 0x40
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f2:	e08c      	b.n	800380e <UART_SetConfig+0x216>
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fa:	e088      	b.n	800380e <UART_SetConfig+0x216>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a81      	ldr	r2, [pc, #516]	@ (8003908 <UART_SetConfig+0x310>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <UART_SetConfig+0x140>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a80      	ldr	r2, [pc, #512]	@ (800390c <UART_SetConfig+0x314>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <UART_SetConfig+0x140>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7e      	ldr	r2, [pc, #504]	@ (8003910 <UART_SetConfig+0x318>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <UART_SetConfig+0x140>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7d      	ldr	r2, [pc, #500]	@ (8003914 <UART_SetConfig+0x31c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <UART_SetConfig+0x140>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7b      	ldr	r2, [pc, #492]	@ (8003918 <UART_SetConfig+0x320>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <UART_SetConfig+0x140>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7a      	ldr	r2, [pc, #488]	@ (800391c <UART_SetConfig+0x324>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d131      	bne.n	800379c <UART_SetConfig+0x1a4>
 8003738:	4b72      	ldr	r3, [pc, #456]	@ (8003904 <UART_SetConfig+0x30c>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	2b05      	cmp	r3, #5
 8003742:	d827      	bhi.n	8003794 <UART_SetConfig+0x19c>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <UART_SetConfig+0x154>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003765 	.word	0x08003765
 8003750:	0800376d 	.word	0x0800376d
 8003754:	08003775 	.word	0x08003775
 8003758:	0800377d 	.word	0x0800377d
 800375c:	08003785 	.word	0x08003785
 8003760:	0800378d 	.word	0x0800378d
 8003764:	2300      	movs	r3, #0
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e016      	b.n	800379a <UART_SetConfig+0x1a2>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003772:	e012      	b.n	800379a <UART_SetConfig+0x1a2>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377a:	e00e      	b.n	800379a <UART_SetConfig+0x1a2>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003782:	e00a      	b.n	800379a <UART_SetConfig+0x1a2>
 8003784:	2320      	movs	r3, #32
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800378a:	e006      	b.n	800379a <UART_SetConfig+0x1a2>
 800378c:	2340      	movs	r3, #64	@ 0x40
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003792:	e002      	b.n	800379a <UART_SetConfig+0x1a2>
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800379a:	e038      	b.n	800380e <UART_SetConfig+0x216>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a55      	ldr	r2, [pc, #340]	@ (80038f8 <UART_SetConfig+0x300>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d130      	bne.n	8003808 <UART_SetConfig+0x210>
 80037a6:	4b57      	ldr	r3, [pc, #348]	@ (8003904 <UART_SetConfig+0x30c>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d826      	bhi.n	8003800 <UART_SetConfig+0x208>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <UART_SetConfig+0x1c0>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037d9 	.word	0x080037d9
 80037c0:	080037e1 	.word	0x080037e1
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	2302      	movs	r3, #2
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d6:	e01a      	b.n	800380e <UART_SetConfig+0x216>
 80037d8:	2304      	movs	r3, #4
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037de:	e016      	b.n	800380e <UART_SetConfig+0x216>
 80037e0:	2308      	movs	r3, #8
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e012      	b.n	800380e <UART_SetConfig+0x216>
 80037e8:	2310      	movs	r3, #16
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e00e      	b.n	800380e <UART_SetConfig+0x216>
 80037f0:	2320      	movs	r3, #32
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e00a      	b.n	800380e <UART_SetConfig+0x216>
 80037f8:	2340      	movs	r3, #64	@ 0x40
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e006      	b.n	800380e <UART_SetConfig+0x216>
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e002      	b.n	800380e <UART_SetConfig+0x216>
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a39      	ldr	r2, [pc, #228]	@ (80038f8 <UART_SetConfig+0x300>)
 8003814:	4293      	cmp	r3, r2
 8003816:	f040 80fe 	bne.w	8003a16 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800381a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800381e:	2b20      	cmp	r3, #32
 8003820:	dc48      	bgt.n	80038b4 <UART_SetConfig+0x2bc>
 8003822:	2b02      	cmp	r3, #2
 8003824:	f2c0 8088 	blt.w	8003938 <UART_SetConfig+0x340>
 8003828:	3b02      	subs	r3, #2
 800382a:	2b1e      	cmp	r3, #30
 800382c:	f200 8084 	bhi.w	8003938 <UART_SetConfig+0x340>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <UART_SetConfig+0x240>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	080038cb 	.word	0x080038cb
 800383c:	08003939 	.word	0x08003939
 8003840:	080038bb 	.word	0x080038bb
 8003844:	08003939 	.word	0x08003939
 8003848:	08003939 	.word	0x08003939
 800384c:	08003939 	.word	0x08003939
 8003850:	080038c3 	.word	0x080038c3
 8003854:	08003939 	.word	0x08003939
 8003858:	08003939 	.word	0x08003939
 800385c:	08003939 	.word	0x08003939
 8003860:	08003939 	.word	0x08003939
 8003864:	08003939 	.word	0x08003939
 8003868:	08003939 	.word	0x08003939
 800386c:	08003939 	.word	0x08003939
 8003870:	080038d3 	.word	0x080038d3
 8003874:	08003939 	.word	0x08003939
 8003878:	08003939 	.word	0x08003939
 800387c:	08003939 	.word	0x08003939
 8003880:	08003939 	.word	0x08003939
 8003884:	08003939 	.word	0x08003939
 8003888:	08003939 	.word	0x08003939
 800388c:	08003939 	.word	0x08003939
 8003890:	08003939 	.word	0x08003939
 8003894:	08003939 	.word	0x08003939
 8003898:	08003939 	.word	0x08003939
 800389c:	08003939 	.word	0x08003939
 80038a0:	08003939 	.word	0x08003939
 80038a4:	08003939 	.word	0x08003939
 80038a8:	08003939 	.word	0x08003939
 80038ac:	08003939 	.word	0x08003939
 80038b0:	0800392b 	.word	0x0800392b
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d03b      	beq.n	8003930 <UART_SetConfig+0x338>
 80038b8:	e03e      	b.n	8003938 <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 80038ba:	f7fe fc2d 	bl	8002118 <HAL_RCC_GetPLL2QFreq>
 80038be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038c0:	e040      	b.n	8003944 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 80038c2:	f7fe fc3f 	bl	8002144 <HAL_RCC_GetPLL3QFreq>
 80038c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038c8:	e03c      	b.n	8003944 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 80038ca:	f7fe fc09 	bl	80020e0 <HAL_RCC_GetPCLK4Freq>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038d0:	e038      	b.n	8003944 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <UART_SetConfig+0x30c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d022      	beq.n	8003924 <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <UART_SetConfig+0x30c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <UART_SetConfig+0x328>)
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038f0:	e028      	b.n	8003944 <UART_SetConfig+0x34c>
 80038f2:	bf00      	nop
 80038f4:	cfff69f3 	.word	0xcfff69f3
 80038f8:	58000c00 	.word	0x58000c00
 80038fc:	11fff4ff 	.word	0x11fff4ff
 8003900:	42001000 	.word	0x42001000
 8003904:	58024400 	.word	0x58024400
 8003908:	40004400 	.word	0x40004400
 800390c:	40004800 	.word	0x40004800
 8003910:	40004c00 	.word	0x40004c00
 8003914:	40005000 	.word	0x40005000
 8003918:	40007800 	.word	0x40007800
 800391c:	40007c00 	.word	0x40007c00
 8003920:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003924:	4b99      	ldr	r3, [pc, #612]	@ (8003b8c <UART_SetConfig+0x594>)
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003928:	e00c      	b.n	8003944 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800392a:	4b99      	ldr	r3, [pc, #612]	@ (8003b90 <UART_SetConfig+0x598>)
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800392e:	e009      	b.n	8003944 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003936:	e005      	b.n	8003944 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003942:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81ce 	beq.w	8003ce8 <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	4a90      	ldr	r2, [pc, #576]	@ (8003b94 <UART_SetConfig+0x59c>)
 8003952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003956:	461a      	mov	r2, r3
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	fbb3 f3f2 	udiv	r3, r3, r2
 800395e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d305      	bcc.n	800397c <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d903      	bls.n	8003984 <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003982:	e1b1      	b.n	8003ce8 <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	2200      	movs	r2, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	60fa      	str	r2, [r7, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	4a80      	ldr	r2, [pc, #512]	@ (8003b94 <UART_SetConfig+0x59c>)
 8003992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003996:	b29b      	uxth	r3, r3
 8003998:	2200      	movs	r2, #0
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f7fc fca3 	bl	80002f0 <__aeabi_uldivmod>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	020b      	lsls	r3, r1, #8
 80039bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039c0:	0202      	lsls	r2, r0, #8
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	6849      	ldr	r1, [r1, #4]
 80039c6:	0849      	lsrs	r1, r1, #1
 80039c8:	2000      	movs	r0, #0
 80039ca:	460c      	mov	r4, r1
 80039cc:	4605      	mov	r5, r0
 80039ce:	eb12 0804 	adds.w	r8, r2, r4
 80039d2:	eb43 0905 	adc.w	r9, r3, r5
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	469a      	mov	sl, r3
 80039de:	4693      	mov	fp, r2
 80039e0:	4652      	mov	r2, sl
 80039e2:	465b      	mov	r3, fp
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fc fc82 	bl	80002f0 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fa:	d308      	bcc.n	8003a0e <UART_SetConfig+0x416>
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a02:	d204      	bcs.n	8003a0e <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e16c      	b.n	8003ce8 <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a14:	e168      	b.n	8003ce8 <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1e:	f040 80bd 	bne.w	8003b9c <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 8003a22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	dc48      	bgt.n	8003abc <UART_SetConfig+0x4c4>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db73      	blt.n	8003b16 <UART_SetConfig+0x51e>
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d871      	bhi.n	8003b16 <UART_SetConfig+0x51e>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x440>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003ac3 	.word	0x08003ac3
 8003a3c:	08003acb 	.word	0x08003acb
 8003a40:	08003b17 	.word	0x08003b17
 8003a44:	08003b17 	.word	0x08003b17
 8003a48:	08003ad3 	.word	0x08003ad3
 8003a4c:	08003b17 	.word	0x08003b17
 8003a50:	08003b17 	.word	0x08003b17
 8003a54:	08003b17 	.word	0x08003b17
 8003a58:	08003adb 	.word	0x08003adb
 8003a5c:	08003b17 	.word	0x08003b17
 8003a60:	08003b17 	.word	0x08003b17
 8003a64:	08003b17 	.word	0x08003b17
 8003a68:	08003b17 	.word	0x08003b17
 8003a6c:	08003b17 	.word	0x08003b17
 8003a70:	08003b17 	.word	0x08003b17
 8003a74:	08003b17 	.word	0x08003b17
 8003a78:	08003ae3 	.word	0x08003ae3
 8003a7c:	08003b17 	.word	0x08003b17
 8003a80:	08003b17 	.word	0x08003b17
 8003a84:	08003b17 	.word	0x08003b17
 8003a88:	08003b17 	.word	0x08003b17
 8003a8c:	08003b17 	.word	0x08003b17
 8003a90:	08003b17 	.word	0x08003b17
 8003a94:	08003b17 	.word	0x08003b17
 8003a98:	08003b17 	.word	0x08003b17
 8003a9c:	08003b17 	.word	0x08003b17
 8003aa0:	08003b17 	.word	0x08003b17
 8003aa4:	08003b17 	.word	0x08003b17
 8003aa8:	08003b17 	.word	0x08003b17
 8003aac:	08003b17 	.word	0x08003b17
 8003ab0:	08003b17 	.word	0x08003b17
 8003ab4:	08003b17 	.word	0x08003b17
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d026      	beq.n	8003b0e <UART_SetConfig+0x516>
 8003ac0:	e029      	b.n	8003b16 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7fe fad5 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ac8:	e02b      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aca:	f7fe faed 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ad0:	e027      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8003ad2:	f7fe fb21 	bl	8002118 <HAL_RCC_GetPLL2QFreq>
 8003ad6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ad8:	e023      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8003ada:	f7fe fb33 	bl	8002144 <HAL_RCC_GetPLL3QFreq>
 8003ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ae0:	e01f      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b98 <UART_SetConfig+0x5a0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003aee:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <UART_SetConfig+0x5a0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	4a24      	ldr	r2, [pc, #144]	@ (8003b8c <UART_SetConfig+0x594>)
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b00:	e00f      	b.n	8003b22 <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 8003b02:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <UART_SetConfig+0x594>)
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b06:	e00c      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <UART_SetConfig+0x598>)
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b0c:	e009      	b.n	8003b22 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b14:	e005      	b.n	8003b22 <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80df 	beq.w	8003ce8 <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <UART_SetConfig+0x59c>)
 8003b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3c:	005a      	lsls	r2, r3, #1
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	441a      	add	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	d916      	bls.n	8003b84 <UART_SetConfig+0x58c>
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5c:	d212      	bcs.n	8003b84 <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f023 030f 	bic.w	r3, r3, #15
 8003b66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	8bfa      	ldrh	r2, [r7, #30]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	e0b1      	b.n	8003ce8 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b8a:	e0ad      	b.n	8003ce8 <UART_SetConfig+0x6f0>
 8003b8c:	03d09000 	.word	0x03d09000
 8003b90:	003d0900 	.word	0x003d0900
 8003b94:	080043e4 	.word	0x080043e4
 8003b98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	dc49      	bgt.n	8003c38 <UART_SetConfig+0x640>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db74      	blt.n	8003c92 <UART_SetConfig+0x69a>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d872      	bhi.n	8003c92 <UART_SetConfig+0x69a>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <UART_SetConfig+0x5bc>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003c3f 	.word	0x08003c3f
 8003bb8:	08003c47 	.word	0x08003c47
 8003bbc:	08003c93 	.word	0x08003c93
 8003bc0:	08003c93 	.word	0x08003c93
 8003bc4:	08003c4f 	.word	0x08003c4f
 8003bc8:	08003c93 	.word	0x08003c93
 8003bcc:	08003c93 	.word	0x08003c93
 8003bd0:	08003c93 	.word	0x08003c93
 8003bd4:	08003c57 	.word	0x08003c57
 8003bd8:	08003c93 	.word	0x08003c93
 8003bdc:	08003c93 	.word	0x08003c93
 8003be0:	08003c93 	.word	0x08003c93
 8003be4:	08003c93 	.word	0x08003c93
 8003be8:	08003c93 	.word	0x08003c93
 8003bec:	08003c93 	.word	0x08003c93
 8003bf0:	08003c93 	.word	0x08003c93
 8003bf4:	08003c5f 	.word	0x08003c5f
 8003bf8:	08003c93 	.word	0x08003c93
 8003bfc:	08003c93 	.word	0x08003c93
 8003c00:	08003c93 	.word	0x08003c93
 8003c04:	08003c93 	.word	0x08003c93
 8003c08:	08003c93 	.word	0x08003c93
 8003c0c:	08003c93 	.word	0x08003c93
 8003c10:	08003c93 	.word	0x08003c93
 8003c14:	08003c93 	.word	0x08003c93
 8003c18:	08003c93 	.word	0x08003c93
 8003c1c:	08003c93 	.word	0x08003c93
 8003c20:	08003c93 	.word	0x08003c93
 8003c24:	08003c93 	.word	0x08003c93
 8003c28:	08003c93 	.word	0x08003c93
 8003c2c:	08003c93 	.word	0x08003c93
 8003c30:	08003c93 	.word	0x08003c93
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	d026      	beq.n	8003c8a <UART_SetConfig+0x692>
 8003c3c:	e029      	b.n	8003c92 <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe fa17 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8003c42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c44:	e02b      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c46:	f7fe fa2f 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c4c:	e027      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8003c4e:	f7fe fa63 	bl	8002118 <HAL_RCC_GetPLL2QFreq>
 8003c52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c54:	e023      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8003c56:	f7fe fa75 	bl	8002144 <HAL_RCC_GetPLL3QFreq>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c5c:	e01f      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d14 <UART_SetConfig+0x71c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d14 <UART_SetConfig+0x71c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	08db      	lsrs	r3, r3, #3
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <UART_SetConfig+0x720>)
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c7c:	e00f      	b.n	8003c9e <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 8003c7e:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <UART_SetConfig+0x720>)
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c82:	e00c      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003c84:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <UART_SetConfig+0x724>)
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c88:	e009      	b.n	8003c9e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c90:	e005      	b.n	8003c9e <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d021      	beq.n	8003ce8 <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d20 <UART_SetConfig+0x728>)
 8003caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	441a      	add	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	d909      	bls.n	8003ce2 <UART_SetConfig+0x6ea>
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd4:	d205      	bcs.n	8003ce2 <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	e002      	b.n	8003ce8 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3730      	adds	r7, #48	@ 0x30
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
 8003d18:	03d09000 	.word	0x03d09000
 8003d1c:	003d0900 	.word	0x003d0900
 8003d20:	080043e4 	.word	0x080043e4

08003d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e22:	d10a      	bne.n	8003e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b098      	sub	sp, #96	@ 0x60
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e78:	f7fc fee4 	bl	8000c44 <HAL_GetTick>
 8003e7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d12f      	bne.n	8003eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f88e 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d022      	beq.n	8003eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e6      	bne.n	8003ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e063      	b.n	8003fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d149      	bne.n	8003f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003efa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	2200      	movs	r2, #0
 8003f04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f857 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03c      	beq.n	8003f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	623b      	str	r3, [r7, #32]
   return(result);
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e6      	bne.n	8003f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f66:	61fa      	str	r2, [r7, #28]
 8003f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	617b      	str	r3, [r7, #20]
   return(result);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e012      	b.n	8003fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3758      	adds	r7, #88	@ 0x58
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	e04f      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d04b      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fc fe35 	bl	8000c44 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e04e      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d037      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b80      	cmp	r3, #128	@ 0x80
 8004002:	d034      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b40      	cmp	r3, #64	@ 0x40
 8004008:	d031      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d110      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f839 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2208      	movs	r2, #8
 800402a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e029      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004048:	d111      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f81f 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00f      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	429a      	cmp	r2, r3
 800408a:	d0a0      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b095      	sub	sp, #84	@ 0x54
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <UART_EndRxTransfer+0xc8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d118      	bne.n	8004140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004154:	bf00      	nop
 8004156:	3754      	adds	r7, #84	@ 0x54
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	effffffe 	.word	0xeffffffe

08004164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_UARTEx_DisableFifoMode+0x16>
 8004176:	2302      	movs	r3, #2
 8004178:	e027      	b.n	80041ca <HAL_UARTEx_DisableFifoMode+0x66>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2224      	movs	r2, #36	@ 0x24
 8004186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80041a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e02d      	b.n	800424a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	@ 0x24
 80041fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f850 	bl	80042d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004266:	2302      	movs	r3, #2
 8004268:	e02d      	b.n	80042c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2224      	movs	r2, #36	@ 0x24
 8004276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f812 	bl	80042d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042f0:	e031      	b.n	8004356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042f2:	2310      	movs	r3, #16
 80042f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042f6:	2310      	movs	r3, #16
 80042f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	0e5b      	lsrs	r3, r3, #25
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	0f5b      	lsrs	r3, r3, #29
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800431a:	7bbb      	ldrb	r3, [r7, #14]
 800431c:	7b3a      	ldrb	r2, [r7, #12]
 800431e:	4911      	ldr	r1, [pc, #68]	@ (8004364 <UARTEx_SetNbDataToProcess+0x94>)
 8004320:	5c8a      	ldrb	r2, [r1, r2]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004326:	7b3a      	ldrb	r2, [r7, #12]
 8004328:	490f      	ldr	r1, [pc, #60]	@ (8004368 <UARTEx_SetNbDataToProcess+0x98>)
 800432a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800432c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	7b7a      	ldrb	r2, [r7, #13]
 800433c:	4909      	ldr	r1, [pc, #36]	@ (8004364 <UARTEx_SetNbDataToProcess+0x94>)
 800433e:	5c8a      	ldrb	r2, [r1, r2]
 8004340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004344:	7b7a      	ldrb	r2, [r7, #13]
 8004346:	4908      	ldr	r1, [pc, #32]	@ (8004368 <UARTEx_SetNbDataToProcess+0x98>)
 8004348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800434a:	fb93 f3f2 	sdiv	r3, r3, r2
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	080043fc 	.word	0x080043fc
 8004368:	08004404 	.word	0x08004404

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4d0d      	ldr	r5, [pc, #52]	@ (80043b4 <__libc_init_array+0x38>)
 8004380:	4c0d      	ldr	r4, [pc, #52]	@ (80043b8 <__libc_init_array+0x3c>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	2600      	movs	r6, #0
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	4d0b      	ldr	r5, [pc, #44]	@ (80043bc <__libc_init_array+0x40>)
 800438e:	4c0c      	ldr	r4, [pc, #48]	@ (80043c0 <__libc_init_array+0x44>)
 8004390:	f000 f818 	bl	80043c4 <_init>
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	2600      	movs	r6, #0
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08004414 	.word	0x08004414
 80043b8:	08004414 	.word	0x08004414
 80043bc:	08004414 	.word	0x08004414
 80043c0:	08004418 	.word	0x08004418

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
