
DemoBootLoad_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003568  08003568  00004568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a0  080035a0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a0  080035a0  000045a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035a4  080035a4  000045a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  080035a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2400000c  080035b4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00006000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da5a  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ea  00000000  00000000  00012a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00014480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000790  00000000  00000000  00014e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000302a0  00000000  00000000  000155e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5c0  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00133fc1  00000000  00000000  00052e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  00186e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08003550 	.word	0x08003550

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	08003550 	.word	0x08003550

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e4:	f000 f8ac 	bl	8000740 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
 80005e8:	f000 f98c 	bl	8000904 <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 faeb 	bl	8000bc6 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f872 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f824 	bl	8000640 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  myCounter++;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <main+0x58>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <main+0x58>)
 8000600:	6013      	str	r3, [r2, #0]
	  myCounter++;
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <main+0x58>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <main+0x58>)
 800060a:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000612:	480a      	ldr	r0, [pc, #40]	@ (800063c <main+0x5c>)
 8000614:	f000 fe30 	bl	8001278 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800061c:	f000 fb48 	bl	8000cb0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <main+0x5c>)
 8000628:	f000 fe26 	bl	8001278 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000630:	f000 fb3e 	bl	8000cb0 <HAL_Delay>
	  myCounter++;
 8000634:	bf00      	nop
 8000636:	e7df      	b.n	80005f8 <main+0x18>
 8000638:	240000bc 	.word	0x240000bc
 800063c:	58020000 	.word	0x58020000

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000646:	4a23      	ldr	r2, [pc, #140]	@ (80006d4 <MX_USART2_UART_Init+0x94>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800068a:	f002 f82b 	bl	80026e4 <HAL_UART_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f880 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 800069c:	f002 fe61 	bl	8003362 <HAL_UARTEx_SetTxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f877 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 80006ae:	f002 fe96 	bl	80033de <HAL_UARTEx_SetRxFifoThreshold>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f86e 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_USART2_UART_Init+0x90>)
 80006be:	f002 fe17 	bl	80032f0 <HAL_UARTEx_DisableFifoMode>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f866 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	24000028 	.word	0x24000028
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_GPIO_Init+0x60>)
 80006ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f2:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <MX_GPIO_Init+0x60>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_GPIO_Init+0x60>)
 80006fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <MX_GPIO_Init+0x64>)
 800070e:	f000 fdb3 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_GPIO_Init+0x64>)
 800072a:	f000 fc4f 	bl	8000fcc <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58024400 	.word	0x58024400
 800073c:	58020000 	.word	0x58020000

08000740 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000752:	f000 fbd7 	bl	8000f04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000756:	2301      	movs	r3, #1
 8000758:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800075a:	2300      	movs	r3, #0
 800075c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000762:	231f      	movs	r3, #31
 8000764:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000766:	2387      	movs	r3, #135	@ 0x87
 8000768:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800076a:	2300      	movs	r3, #0
 800076c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800076e:	2300      	movs	r3, #0
 8000770:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000776:	2301      	movs	r3, #1
 8000778:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000782:	463b      	mov	r3, r7
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fbdb 	bl	8000f40 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800078a:	2004      	movs	r0, #4
 800078c:	f000 fb98 	bl	8000ec0 <HAL_MPU_Enable>

}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0aa      	sub	sp, #168	@ 0xa8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2284      	movs	r2, #132	@ 0x84
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fe8f 	bl	80034f8 <memset>
  if(huart->Instance==USART2)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <HAL_UART_MspInit+0xb8>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d13e      	bne.n	8000862 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80007e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f871 	bl	80018dc <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000800:	f7ff ffca 	bl	8000798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 8000806:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 8000816:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_UART_MspInit+0xbc>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000838:	2360      	movs	r3, #96	@ 0x60
 800083a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000856:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <HAL_UART_MspInit+0xc0>)
 800085e:	f000 fbb5 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	37a8      	adds	r7, #168	@ 0xa8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400
 8000870:	58024400 	.word	0x58024400
 8000874:	58020c00 	.word	0x58020c00

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f9cf 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <SystemInit+0x24>)
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <SystemInit+0x28>)
 80008e0:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x24>)
 80008e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <SystemInit+0x24>)
 80008ea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00
 8000900:	08000000 	.word	0x08000000

08000904 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	@ 0x24
 8000908:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800090a:	4b92      	ldr	r3, [pc, #584]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000912:	2b18      	cmp	r3, #24
 8000914:	f200 80fb 	bhi.w	8000b0e <SystemCoreClockUpdate+0x20a>
 8000918:	a201      	add	r2, pc, #4	@ (adr r2, 8000920 <SystemCoreClockUpdate+0x1c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000985 	.word	0x08000985
 8000924:	08000b0f 	.word	0x08000b0f
 8000928:	08000b0f 	.word	0x08000b0f
 800092c:	08000b0f 	.word	0x08000b0f
 8000930:	08000b0f 	.word	0x08000b0f
 8000934:	08000b0f 	.word	0x08000b0f
 8000938:	08000b0f 	.word	0x08000b0f
 800093c:	08000b0f 	.word	0x08000b0f
 8000940:	08000999 	.word	0x08000999
 8000944:	08000b0f 	.word	0x08000b0f
 8000948:	08000b0f 	.word	0x08000b0f
 800094c:	08000b0f 	.word	0x08000b0f
 8000950:	08000b0f 	.word	0x08000b0f
 8000954:	08000b0f 	.word	0x08000b0f
 8000958:	08000b0f 	.word	0x08000b0f
 800095c:	08000b0f 	.word	0x08000b0f
 8000960:	0800099f 	.word	0x0800099f
 8000964:	08000b0f 	.word	0x08000b0f
 8000968:	08000b0f 	.word	0x08000b0f
 800096c:	08000b0f 	.word	0x08000b0f
 8000970:	08000b0f 	.word	0x08000b0f
 8000974:	08000b0f 	.word	0x08000b0f
 8000978:	08000b0f 	.word	0x08000b0f
 800097c:	08000b0f 	.word	0x08000b0f
 8000980:	080009a5 	.word	0x080009a5
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8000984:	4b73      	ldr	r3, [pc, #460]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	4a72      	ldr	r2, [pc, #456]	@ (8000b58 <SystemCoreClockUpdate+0x254>)
 8000990:	fa22 f303 	lsr.w	r3, r2, r3
 8000994:	61fb      	str	r3, [r7, #28]
    break;
 8000996:	e0c4      	b.n	8000b22 <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
 8000998:	4b70      	ldr	r3, [pc, #448]	@ (8000b5c <SystemCoreClockUpdate+0x258>)
 800099a:	61fb      	str	r3, [r7, #28]
    break;
 800099c:	e0c1      	b.n	8000b22 <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 800099e:	4b70      	ldr	r3, [pc, #448]	@ (8000b60 <SystemCoreClockUpdate+0x25c>)
 80009a0:	61fb      	str	r3, [r7, #28]
    break;
 80009a2:	e0be      	b.n	8000b22 <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80009a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 80009a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 80009ae:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 80009b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009b8:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 80009ba:	4b66      	ldr	r3, [pc, #408]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00b      	beq.n	80009de <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
 80009c6:	4b63      	ldr	r3, [pc, #396]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009d8:	edc7 7a06 	vstr	s15, [r7, #24]
 80009dc:	e002      	b.n	80009e4 <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 808e 	beq.w	8000b08 <SystemCoreClockUpdate+0x204>
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d024      	beq.n	8000a3c <SystemCoreClockUpdate+0x138>
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d143      	bne.n	8000a80 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8000b64 <SystemCoreClockUpdate+0x260>
 8000a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a0a:	4b52      	ldr	r3, [pc, #328]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a1a:	ed97 6a06 	vldr	s12, [r7, #24]
 8000a1e:	eddf 5a52 	vldr	s11, [pc, #328]	@ 8000b68 <SystemCoreClockUpdate+0x264>
 8000a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a36:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 8000a3a:	e04f      	b.n	8000adc <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a46:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000b6c <SystemCoreClockUpdate+0x268>
 8000a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a4e:	4b41      	ldr	r3, [pc, #260]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a5e:	ed97 6a06 	vldr	s12, [r7, #24]
 8000a62:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8000b68 <SystemCoreClockUpdate+0x264>
 8000a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7a:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 8000a7e:	e02d      	b.n	8000adc <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8000a80:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	08db      	lsrs	r3, r3, #3
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	4a33      	ldr	r2, [pc, #204]	@ (8000b58 <SystemCoreClockUpdate+0x254>)
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000aba:	ed97 6a06 	vldr	s12, [r7, #24]
 8000abe:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 8000b68 <SystemCoreClockUpdate+0x264>
 8000ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 8000ada:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	0a5b      	lsrs	r3, r3, #9
 8000ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000af4:	edd7 6a05 	vldr	s13, [r7, #20]
 8000af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b00:	ee17 3a90 	vmov	r3, s15
 8000b04:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
 8000b06:	e00c      	b.n	8000b22 <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    break;
 8000b0c:	e009      	b.n	8000b22 <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	08db      	lsrs	r3, r3, #3
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SystemCoreClockUpdate+0x254>)
 8000b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1e:	61fb      	str	r3, [r7, #28]
    break;
 8000b20:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <SystemCoreClockUpdate+0x250>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	d907      	bls.n	8000b42 <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3b07      	subs	r3, #7
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <SystemCoreClockUpdate+0x26c>)
 8000b3e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
 8000b40:	e002      	b.n	8000b48 <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <SystemCoreClockUpdate+0x26c>)
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	3724      	adds	r7, #36	@ 0x24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400
 8000b58:	03d09000 	.word	0x03d09000
 8000b5c:	003d0900 	.word	0x003d0900
 8000b60:	016e3600 	.word	0x016e3600
 8000b64:	4bb71b00 	.word	0x4bb71b00
 8000b68:	46000000 	.word	0x46000000
 8000b6c:	4a742400 	.word	0x4a742400
 8000b70:	24000000 	.word	0x24000000

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b78:	f7ff feae 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 fcb1 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fd1b 	bl	80005e0 <main>

08000baa <LoopForever>:

LoopForever:
  b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb4:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000bb8:	080035a8 	.word	0x080035a8
  ldr r2, =_sbss
 8000bbc:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8000bc0:	240000c4 	.word	0x240000c4

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>

08000bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f943 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f80e 	bl	8000bf8 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be8:	f7ff fddc 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_InitTick+0x70>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f93f 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d809      	bhi.n	8000c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f919 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_InitTick+0x74>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e004      	b.n	8000c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e001      	b.n	8000c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000008 	.word	0x24000008
 8000c68:	24000000 	.word	0x24000000
 8000c6c:	24000004 	.word	0x24000004

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	24000008 	.word	0x24000008
 8000c94:	240000c0 	.word	0x240000c0

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	240000c0 	.word	0x240000c0

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000008 	.word	0x24000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	05fa0000 	.word	0x05fa0000

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff5e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffb2 	bl	8000e18 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8000ec8:	f3bf 8f5f 	dmb	sy
}
 8000ecc:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <HAL_MPU_Enable+0x3c>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MPU_Enable+0x40>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MPU_Enable+0x40>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee2:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee4:	f3bf 8f4f 	dsb	sy
}
 8000ee8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eea:	f3bf 8f6f 	isb	sy
}
 8000eee:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed90 	.word	0xe000ed90
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8000f08:	f3bf 8f5f 	dmb	sy
}
 8000f0c:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_MPU_Disable+0x34>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <HAL_MPU_Disable+0x34>)
 8000f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_MPU_Disable+0x38>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f20:	f3bf 8f4f 	dsb	sy
}
 8000f24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f26:	f3bf 8f6f 	isb	sy
}
 8000f2a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	e000ed90 	.word	0xe000ed90

08000f40 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	785a      	ldrb	r2, [r3, #1]
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f4e:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7b1b      	ldrb	r3, [r3, #12]
 8000f74:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7adb      	ldrb	r3, [r3, #11]
 8000f7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000f7c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7a9b      	ldrb	r3, [r3, #10]
 8000f82:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8000f84:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7b5b      	ldrb	r3, [r3, #13]
 8000f8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8000f8c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7b9b      	ldrb	r3, [r3, #14]
 8000f92:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8000f94:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7bdb      	ldrb	r3, [r3, #15]
 8000f9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8000f9c:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7a5b      	ldrb	r3, [r3, #9]
 8000fa2:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8000fa4:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7a1b      	ldrb	r3, [r3, #8]
 8000faa:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8000fac:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8000fb6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8000fb8:	6113      	str	r3, [r2, #16]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed90 	.word	0xe000ed90

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	e139      	b.n	8001250 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 812b 	beq.w	800124a <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x40>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 0201 	and.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0203 	and.w	r2, r3, #3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8085 	beq.w	800124a <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <HAL_GPIO_Init+0x2a4>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	334c      	adds	r3, #76	@ 0x4c
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	0a9a      	lsrs	r2, r3, #10
 8001168:	4b42      	ldr	r3, [pc, #264]	@ (8001274 <HAL_GPIO_Init+0x2a8>)
 800116a:	4013      	ands	r3, r2
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 800117c:	493c      	ldr	r1, [pc, #240]	@ (8001270 <HAL_GPIO_Init+0x2a4>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	334c      	adds	r3, #76	@ 0x4c
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f aebe 	bne.w	8000fdc <HAL_GPIO_Init+0x10>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	58000400 	.word	0x58000400
 8001274:	0029ff7f 	.word	0x0029ff7f

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001294:	e002      	b.n	800129c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b08b      	sub	sp, #44	@ 0x2c
 80012ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ae:	4baa      	ldr	r3, [pc, #680]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012b6:	2b18      	cmp	r3, #24
 80012b8:	f200 8136 	bhi.w	8001528 <HAL_RCC_GetSysClockFreq+0x280>
 80012bc:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	08001329 	.word	0x08001329
 80012c8:	08001529 	.word	0x08001529
 80012cc:	08001529 	.word	0x08001529
 80012d0:	08001529 	.word	0x08001529
 80012d4:	08001529 	.word	0x08001529
 80012d8:	08001529 	.word	0x08001529
 80012dc:	08001529 	.word	0x08001529
 80012e0:	08001529 	.word	0x08001529
 80012e4:	0800134f 	.word	0x0800134f
 80012e8:	08001529 	.word	0x08001529
 80012ec:	08001529 	.word	0x08001529
 80012f0:	08001529 	.word	0x08001529
 80012f4:	08001529 	.word	0x08001529
 80012f8:	08001529 	.word	0x08001529
 80012fc:	08001529 	.word	0x08001529
 8001300:	08001529 	.word	0x08001529
 8001304:	08001355 	.word	0x08001355
 8001308:	08001529 	.word	0x08001529
 800130c:	08001529 	.word	0x08001529
 8001310:	08001529 	.word	0x08001529
 8001314:	08001529 	.word	0x08001529
 8001318:	08001529 	.word	0x08001529
 800131c:	08001529 	.word	0x08001529
 8001320:	08001529 	.word	0x08001529
 8001324:	0800135b 	.word	0x0800135b
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001328:	4b8b      	ldr	r3, [pc, #556]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d009      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001334:	4b88      	ldr	r3, [pc, #544]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	4a87      	ldr	r2, [pc, #540]	@ (800155c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8001346:	e0f2      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
      break;
 800134c:	e0ef      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800134e:	4b84      	ldr	r3, [pc, #528]	@ (8001560 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8001350:	623b      	str	r3, [r7, #32]
      break;
 8001352:	e0ec      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001354:	4b83      	ldr	r3, [pc, #524]	@ (8001564 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8001356:	623b      	str	r3, [r7, #32]
      break;
 8001358:	e0e9      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800135a:	4b7f      	ldr	r3, [pc, #508]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8001364:	4b7c      	ldr	r3, [pc, #496]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800136e:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001370:	4b79      	ldr	r3, [pc, #484]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 800137a:	4b77      	ldr	r3, [pc, #476]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001392:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80c2 	beq.w	8001522 <HAL_RCC_GetSysClockFreq+0x27a>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d064      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x1c6>
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	f200 8083 	bhi.w	80014b2 <HAL_RCC_GetSysClockFreq+0x20a>
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x112>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d038      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x182>
 80013b8:	e07b      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80013ba:	4b67      	ldr	r3, [pc, #412]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d02d      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80013c6:	4b64      	ldr	r3, [pc, #400]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	4a62      	ldr	r2, [pc, #392]	@ (800155c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f0:	4b59      	ldr	r3, [pc, #356]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001400:	ed97 6a04 	vldr	s12, [r7, #16]
 8001404:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8001568 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800140c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8001420:	e069      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001428:	e065      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001434:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800156c <HAL_RCC_GetSysClockFreq+0x2c4>
 8001438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800143c:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800144c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001450:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8001568 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800145c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 800146c:	e043      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001478:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001570 <HAL_RCC_GetSysClockFreq+0x2c8>
 800147c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001490:	ed97 6a04 	vldr	s12, [r7, #16]
 8001494:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8001568 <HAL_RCC_GetSysClockFreq+0x2c0>
 8001498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800149c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80014b0:	e021      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800156c <HAL_RCC_GetSysClockFreq+0x2c4>
 80014c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80014d8:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8001568 <HAL_RCC_GetSysClockFreq+0x2c0>
 80014dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80014e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80014f4:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001500:	3301      	adds	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151a:	ee17 3a90 	vmov	r3, s15
 800151e:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001520:	e005      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
      break;
 8001526:	e002      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8001528:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <HAL_RCC_GetSysClockFreq+0x2b8>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d905      	bls.n	800154a <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3b07      	subs	r3, #7
 8001542:	6a3a      	ldr	r2, [r7, #32]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800154a:	6a3b      	ldr	r3, [r7, #32]
}
 800154c:	4618      	mov	r0, r3
 800154e:	372c      	adds	r7, #44	@ 0x2c
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	58024400 	.word	0x58024400
 800155c:	03d09000 	.word	0x03d09000
 8001560:	003d0900 	.word	0x003d0900
 8001564:	016e3600 	.word	0x016e3600
 8001568:	46000000 	.word	0x46000000
 800156c:	4a742400 	.word	0x4a742400
 8001570:	4bb71b00 	.word	0x4bb71b00

08001574 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 800157a:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_RCC_GetHCLKFreq+0x48>)
 800157c:	463b      	mov	r3, r7
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8001586:	f7ff fe8f 	bl	80012a8 <HAL_RCC_GetSysClockFreq>
 800158a:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_RCC_GetHCLKFreq+0x4c>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b07      	cmp	r3, #7
 800159a:	d909      	bls.n	80015b0 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3b08      	subs	r3, #8
 80015a0:	3310      	adds	r3, #16
 80015a2:	443b      	add	r3, r7
 80015a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	40d3      	lsrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 80015b0:	68fb      	ldr	r3, [r7, #12]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08003568 	.word	0x08003568
 80015c0:	58024400 	.word	0x58024400

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80015ca:	f7ff ffd3 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 80015ce:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_GetPCLK1Freq+0x34>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d905      	bls.n	80015ec <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3b03      	subs	r3, #3
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58024400 	.word	0x58024400

080015fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8001602:	f7ff ffb7 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001606:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_RCC_GetPCLK2Freq+0x34>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d905      	bls.n	8001626 <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3b03      	subs	r3, #3
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8001626:	687b      	ldr	r3, [r7, #4]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024400 	.word	0x58024400

08001634 <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800163a:	f7ff ff9b 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 800163e:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_RCC_GetPCLK4Freq+0x34>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d905      	bls.n	800165e <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3b03      	subs	r3, #3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_RCC_GetPLL2QFreq+0x28>)
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800167c:	3301      	adds	r3, #1
 800167e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8001680:	f000 f820 	bl	80016c4 <RCC_PLL2_GetVCOOutputFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	58024400 	.word	0x58024400

08001698 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_RCC_GetPLL3QFreq+0x28>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016a8:	3301      	adds	r3, #1
 80016aa:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 80016ac:	f000 f890 	bl	80017d0 <RCC_PLL3_GetVCOOutputFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400

080016c4 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80016ca:	4b3c      	ldr	r3, [pc, #240]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 80016d0:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80016d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d4:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	0b1b      	lsrs	r3, r3, #12
 80016da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016de:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e6:	3301      	adds	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e05c      	b.n	80017ae <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 80016f4:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8001702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	e001      	b.n	8001712 <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d019      	beq.n	8001750 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 800171c:	2b02      	cmp	r3, #2
 800171e:	d81d      	bhi.n	800175c <RCC_PLL2_GetVCOOutputFreq+0x98>
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <RCC_PLL2_GetVCOOutputFreq+0x66>
 8001724:	2b01      	cmp	r3, #1
 8001726:	d016      	beq.n	8001756 <RCC_PLL2_GetVCOOutputFreq+0x92>
 8001728:	e018      	b.n	800175c <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8001748:	e00b      	b.n	8001762 <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
      break;
 800174e:	e008      	b.n	8001762 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 8001752:	61fb      	str	r3, [r7, #28]
      break;
 8001754:	e005      	b.n	8001762 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 8001758:	61fb      	str	r3, [r7, #28]
      break;
 800175a:	e002      	b.n	8001762 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
      break;
 8001760:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800178e:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80017cc <RCC_PLL2_GetVCOOutputFreq+0x108>
 8001792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80017a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017aa:	ee17 3a90 	vmov	r3, s15
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	58024400 	.word	0x58024400
 80017c0:	03d09000 	.word	0x03d09000
 80017c4:	016e3600 	.word	0x016e3600
 80017c8:	003d0900 	.word	0x003d0900
 80017cc:	46000000 	.word	0x46000000

080017d0 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0d1b      	lsrs	r3, r3, #20
 80017e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ea:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f2:	3301      	adds	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e05c      	b.n	80018ba <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	e001      	b.n	800181e <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d019      	beq.n	800185c <RCC_PLL3_GetVCOOutputFreq+0x8c>
 8001828:	2b02      	cmp	r3, #2
 800182a:	d81d      	bhi.n	8001868 <RCC_PLL3_GetVCOOutputFreq+0x98>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <RCC_PLL3_GetVCOOutputFreq+0x66>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d016      	beq.n	8001862 <RCC_PLL3_GetVCOOutputFreq+0x92>
 8001834:	e018      	b.n	8001868 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	08db      	lsrs	r3, r3, #3
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8001854:	e00b      	b.n	800186e <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
      break;
 800185a:	e008      	b.n	800186e <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 800185e:	61fb      	str	r3, [r7, #28]
      break;
 8001860:	e005      	b.n	800186e <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 8001864:	61fb      	str	r3, [r7, #28]
      break;
 8001866:	e002      	b.n	800186e <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
      break;
 800186c:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800189a:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80018d8 <RCC_PLL3_GetVCOOutputFreq+0x108>
 800189e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018aa:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80018ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b6:	ee17 3a90 	vmov	r3, s15
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	03d09000 	.word	0x03d09000
 80018d0:	016e3600 	.word	0x016e3600
 80018d4:	003d0900 	.word	0x003d0900
 80018d8:	46000000 	.word	0x46000000

080018dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018e4:	2300      	movs	r3, #0
 80018e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018e8:	2300      	movs	r3, #0
 80018ea:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8081 	beq.w	80019fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018fa:	4b8c      	ldr	r3, [pc, #560]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001902:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d029      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x82>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800190e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d022      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001918:	4b85      	ldr	r3, [pc, #532]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a84      	ldr	r2, [pc, #528]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001924:	4b82      	ldr	r3, [pc, #520]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	e013      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001936:	4b7d      	ldr	r3, [pc, #500]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800193e:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8001940:	4b7a      	ldr	r3, [pc, #488]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001944:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194a:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800194c:	4b77      	ldr	r3, [pc, #476]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	4a76      	ldr	r2, [pc, #472]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001956:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 8001958:	4a74      	ldr	r2, [pc, #464]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d149      	bne.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800196c:	d115      	bne.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f993 	bl	8000c98 <HAL_GetTick>
 8001972:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001974:	e00b      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f98f 	bl	8000c98 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d902      	bls.n	800198e <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	75fb      	strb	r3, [r7, #23]
            break;
 800198c:	e005      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b67      	ldr	r3, [pc, #412]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ed      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d128      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019a4:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80019ac:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019b8:	0919      	lsrs	r1, r3, #4
 80019ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019bc:	400b      	ands	r3, r1
 80019be:	495b      	ldr	r1, [pc, #364]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	610b      	str	r3, [r1, #16]
 80019c4:	e005      	b.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80019c6:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4a58      	ldr	r2, [pc, #352]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019d0:	6113      	str	r3, [r2, #16]
 80019d2:	4b56      	ldr	r3, [pc, #344]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019de:	4953      	ldr	r1, [pc, #332]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 80019e4:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e8:	4a50      	ldr	r2, [pc, #320]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f0:	e004      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	75bb      	strb	r3, [r7, #22]
 80019f6:	e001      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d030      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d819      	bhi.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001a10:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a4b 	.word	0x08001a4b
 8001a1c:	08001a29 	.word	0x08001a29
 8001a20:	08001a37 	.word	0x08001a37
 8001a24:	08001a4b 	.word	0x08001a4b
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8001a34:	e00a      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001a36:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8001a42:	e003      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	75fb      	strb	r3, [r7, #23]
        break;
 8001a48:	e000      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8001a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001a52:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4933      	ldr	r1, [pc, #204]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001a64:	e001      	b.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02a      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d00c      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d811      	bhi.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d012      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d10d      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8001a8a:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	4a27      	ldr	r2, [pc, #156]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8001a96:	e00a      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8001aa4:	e003      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
        break;
 8001aaa:	e000      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8001aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	491a      	ldr	r1, [pc, #104]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001ac6:	e001      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d031      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b80      	cmp	r3, #128	@ 0x80
 8001ade:	d00c      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001ae0:	2b80      	cmp	r3, #128	@ 0x80
 8001ae2:	d811      	bhi.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8001ae8:	2b40      	cmp	r3, #64	@ 0x40
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001af2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001af6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8001af8:	e00a      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8001b06:	e003      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	75fb      	strb	r3, [r7, #23]
        break;
 8001b0c:	e000      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8001b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d110      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4902      	ldr	r1, [pc, #8]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001b28:	e008      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58024800 	.word	0x58024800
 8001b34:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001b48:	4b93      	ldr	r3, [pc, #588]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4990      	ldr	r1, [pc, #576]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d026      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d007      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8001b72:	e00d      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8001b74:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	4a87      	ldr	r2, [pc, #540]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8001b80:	e009      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	4a84      	ldr	r2, [pc, #528]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	75fb      	strb	r3, [r7, #23]
        break;
 8001b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	f023 0204 	bic.w	r2, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba8:	497b      	ldr	r1, [pc, #492]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001bae:	e001      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02e      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x322>
 8001bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bce:	d813      	bhi.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd8:	d007      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001bda:	e00d      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	4a6d      	ldr	r2, [pc, #436]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8001be8:	e00a      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001bea:	4b6b      	ldr	r3, [pc, #428]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	4a6a      	ldr	r2, [pc, #424]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001bf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8001bf6:	e003      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8001bfc:	e000      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8001bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c06:	4b64      	ldr	r3, [pc, #400]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	4961      	ldr	r1, [pc, #388]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001c18:	e001      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03f      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001c32:	d02a      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001c34:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001c38:	d824      	bhi.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c3e:	d024      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c44:	d81e      	bhi.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001c46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001c4a:	d01e      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001c4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001c50:	d818      	bhi.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c56:	d00e      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001c58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c5c:	d812      	bhi.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d013      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8001c74:	e00a      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001c76:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8001c82:	e003      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
        break;
 8001c88:	e000      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8001c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	493e      	ldr	r1, [pc, #248]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001ca4:	e001      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4935      	ldr	r1, [pc, #212]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8001cd4:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	492d      	ldr	r1, [pc, #180]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8001cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8001d0c:	e003      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
        break;
 8001d12:	e000      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8001d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	491b      	ldr	r1, [pc, #108]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001d2e:	e001      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02f      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d48:	d00e      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001d4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d4e:	d812      	bhi.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8001d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8001d66:	e00a      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8001d74:	e003      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
        break;
 8001d7a:	e000      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8001d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	4901      	ldr	r1, [pc, #4]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	650b      	str	r3, [r1, #80]	@ 0x50
 8001d96:	e003      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8001d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02c      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001db4:	d017      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001dba:	d811      	bhi.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc0:	d011      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc6:	d80b      	bhi.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001dd2:	4b97      	ldr	r3, [pc, #604]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	4a96      	ldr	r2, [pc, #600]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001dd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8001dde:	e003      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	75fb      	strb	r3, [r7, #23]
        break;
 8001de4:	e000      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8001de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8001dee:	4b90      	ldr	r3, [pc, #576]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	498d      	ldr	r1, [pc, #564]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	650b      	str	r3, [r1, #80]	@ 0x50
 8001e00:	e001      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d02c      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e1a:	d017      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e20:	d811      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e26:	d011      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e2c:	d80b      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e36:	d106      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001e38:	4b7d      	ldr	r3, [pc, #500]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001e3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8001e44:	e003      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
        break;
 8001e4a:	e000      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8001e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8001e54:	4b76      	ldr	r3, [pc, #472]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	4973      	ldr	r1, [pc, #460]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	650b      	str	r3, [r1, #80]	@ 0x50
 8001e66:	e001      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d045      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e80:	d02a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8001e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e86:	d824      	bhi.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8001e88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e8c:	d026      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x600>
 8001e8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e92:	d81e      	bhi.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8001e94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e98:	d022      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8001e9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e9e:	d818      	bhi.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8001ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8001ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001eaa:	d812      	bhi.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d019      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	4a5d      	ldr	r2, [pc, #372]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8001ec2:	e010      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	4a59      	ldr	r2, [pc, #356]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001eca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ece:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
        break;
 8001ed6:	e006      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8001ed8:	bf00      	nop
 8001eda:	e004      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8001edc:	bf00      	nop
 8001ede:	e002      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8001ee0:	bf00      	nop
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8001ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eec:	4b50      	ldr	r3, [pc, #320]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	494d      	ldr	r1, [pc, #308]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	650b      	str	r3, [r1, #80]	@ 0x50
 8001efe:	e001      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d045      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f14:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001f18:	d02a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8001f1a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001f1e:	d824      	bhi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f24:	d026      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2a:	d81e      	bhi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8001f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f30:	d022      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8001f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f36:	d818      	bhi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d00e      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8001f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f42:	d812      	bhi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d019      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8001f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f4c:	d10d      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001f4e:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	4a37      	ldr	r2, [pc, #220]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8001f5a:	e010      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001f5c:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	4a33      	ldr	r2, [pc, #204]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8001f68:	e009      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
        break;
 8001f6e:	e006      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8001f70:	bf00      	nop
 8001f72:	e004      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8001f74:	bf00      	nop
 8001f76:	e002      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8001f78:	bf00      	nop
 8001f7a:	e000      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8001f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f90:	4927      	ldr	r1, [pc, #156]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	658b      	str	r3, [r1, #88]	@ 0x58
 8001f96:	e001      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d047      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8001fb0:	d02a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8001fb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8001fb6:	d824      	bhi.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fbc:	d026      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x730>
 8001fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fc2:	d81e      	bhi.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8001fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001fc8:	d022      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8001fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001fce:	d818      	bhi.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8001fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fda:	d812      	bhi.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d019      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8001fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe4:	d10d      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	4a11      	ldr	r2, [pc, #68]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8001ff2:	e010      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8001ffa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8002000:	e009      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
        break;
 8002006:	e006      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002008:	bf00      	nop
 800200a:	e004      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 800200c:	bf00      	nop
 800200e:	e002      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002010:	bf00      	nop
 8002012:	e000      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	4901      	ldr	r1, [pc, #4]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800202a:	4313      	orrs	r3, r2
 800202c:	658b      	str	r3, [r1, #88]	@ 0x58
 800202e:	e003      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d034      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	2b05      	cmp	r3, #5
 800204a:	d81d      	bhi.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 800204c:	a201      	add	r2, pc, #4	@ (adr r2, 8002054 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 800204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002052:	bf00      	nop
 8002054:	0800208f 	.word	0x0800208f
 8002058:	0800206d 	.word	0x0800206d
 800205c:	0800207b 	.word	0x0800207b
 8002060:	0800208f 	.word	0x0800208f
 8002064:	0800208f 	.word	0x0800208f
 8002068:	0800208f 	.word	0x0800208f
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 800206c:	4b91      	ldr	r3, [pc, #580]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	4a90      	ldr	r2, [pc, #576]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002076:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002078:	e00a      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800207a:	4b8e      	ldr	r3, [pc, #568]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	4a8d      	ldr	r2, [pc, #564]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002084:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002086:	e003      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
        break;
 800208c:	e000      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 800208e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002096:	4b87      	ldr	r3, [pc, #540]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4984      	ldr	r1, [pc, #528]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	658b      	str	r3, [r1, #88]	@ 0x58
 80020a8:	e001      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80020ba:	4b7e      	ldr	r3, [pc, #504]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	4a7d      	ldr	r2, [pc, #500]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80020c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d021      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x806>
 80020da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80020e2:	4b74      	ldr	r3, [pc, #464]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	4a73      	ldr	r2, [pc, #460]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80020e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 80020ee:	e003      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
        break;
 80020f4:	e000      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80020f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 80020fe:	4b6d      	ldr	r3, [pc, #436]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	496a      	ldr	r1, [pc, #424]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002110:	e001      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d043      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800212a:	d02c      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800212c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002130:	d826      	bhi.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002136:	d028      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8002138:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800213c:	d820      	bhi.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800213e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002142:	d016      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8002144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002148:	d81a      	bhi.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002152:	d007      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8002154:	e014      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002156:	4b57      	ldr	r3, [pc, #348]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	4a56      	ldr	r2, [pc, #344]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800215c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002160:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002162:	e013      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002164:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	4a52      	ldr	r2, [pc, #328]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002170:	e00c      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002172:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	4a4f      	ldr	r2, [pc, #316]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002178:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800217c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800217e:	e005      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
        break;
 8002184:	e002      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 800218a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002192:	4b48      	ldr	r3, [pc, #288]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002196:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4945      	ldr	r1, [pc, #276]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	654b      	str	r3, [r1, #84]	@ 0x54
 80021a4:	e001      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d04b      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ba:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80021be:	d032      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80021c0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80021c4:	d82c      	bhi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80021c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ca:	d02e      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021d0:	d826      	bhi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80021d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80021d6:	d02a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80021d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80021dc:	d820      	bhi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80021de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021e2:	d016      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x936>
 80021e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021e8:	d81a      	bhi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 80021ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021f2:	d007      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x928>
 80021f4:	e014      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80021f6:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a2e      	ldr	r2, [pc, #184]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80021fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002200:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002202:	e015      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002204:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002210:	e00e      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002212:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002218:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800221c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800221e:	e007      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	75fb      	strb	r3, [r7, #23]
        break;
 8002224:	e004      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 800222e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002242:	491c      	ldr	r1, [pc, #112]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002244:	4313      	orrs	r3, r2
 8002246:	654b      	str	r3, [r1, #84]	@ 0x54
 8002248:	e001      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03e      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800225e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002262:	d029      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002264:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002268:	d820      	bhi.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800226a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800226e:	d016      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8002270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002274:	d81a      	bhi.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800227a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800227e:	d007      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8002280:	e014      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002282:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800228e:	e014      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800229c:	e00d      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800229e:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80022a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022aa:	e006      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
        break;
 80022b0:	e003      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80022b2:	bf00      	nop
 80022b4:	58024400 	.word	0x58024400
        break;
 80022b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022c0:	4b8e      	ldr	r3, [pc, #568]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022cc:	498b      	ldr	r1, [pc, #556]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	650b      	str	r3, [r1, #80]	@ 0x50
 80022d2:	e001      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d043      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ec:	d02c      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	d826      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80022f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f8:	d028      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80022fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022fe:	d820      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002304:	d016      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8002306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800230a:	d81a      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002314:	d007      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8002316:	e014      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002318:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	4a77      	ldr	r2, [pc, #476]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800231e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002322:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002324:	e013      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002326:	4b75      	ldr	r3, [pc, #468]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	4a74      	ldr	r2, [pc, #464]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002334:	4b71      	ldr	r3, [pc, #452]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	4a70      	ldr	r2, [pc, #448]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800233a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800233e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002340:	e005      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
        break;
 8002346:	e002      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8002348:	bf00      	nop
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 800234c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8002354:	4b69      	ldr	r3, [pc, #420]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	4966      	ldr	r1, [pc, #408]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002362:	4313      	orrs	r3, r2
 8002364:	654b      	str	r3, [r1, #84]	@ 0x54
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03c      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	2b40      	cmp	r3, #64	@ 0x40
 800237e:	d026      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8002380:	2b40      	cmp	r3, #64	@ 0x40
 8002382:	d821      	bhi.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002384:	2b30      	cmp	r3, #48	@ 0x30
 8002386:	d024      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002388:	2b30      	cmp	r3, #48	@ 0x30
 800238a:	d81d      	bhi.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d014      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002390:	2b20      	cmp	r3, #32
 8002392:	d819      	bhi.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8002398:	2b10      	cmp	r3, #16
 800239a:	d007      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800239c:	e014      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800239e:	4b57      	ldr	r3, [pc, #348]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80023aa:	e013      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80023ac:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80023b8:	e00c      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80023ba:	4b50      	ldr	r3, [pc, #320]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	4a4f      	ldr	r2, [pc, #316]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 80023c6:	e005      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
        break;
 80023cc:	e002      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80023d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 80023da:	4b48      	ldr	r3, [pc, #288]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	4945      	ldr	r1, [pc, #276]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	650b      	str	r3, [r1, #80]	@ 0x50
 80023ec:	e001      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03c      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	2b50      	cmp	r3, #80	@ 0x50
 8002404:	d022      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8002406:	2b50      	cmp	r3, #80	@ 0x50
 8002408:	d81d      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800240a:	2b40      	cmp	r3, #64	@ 0x40
 800240c:	d020      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800240e:	2b40      	cmp	r3, #64	@ 0x40
 8002410:	d819      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002412:	2b30      	cmp	r3, #48	@ 0x30
 8002414:	d01e      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8002416:	2b30      	cmp	r3, #48	@ 0x30
 8002418:	d815      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 800241a:	2b20      	cmp	r3, #32
 800241c:	d00c      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800241e:	2b20      	cmp	r3, #32
 8002420:	d811      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d018      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002426:	2b10      	cmp	r3, #16
 8002428:	d10d      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 800242a:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	4a33      	ldr	r2, [pc, #204]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8002436:	e010      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002438:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002442:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8002444:	e009      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
        break;
 800244a:	e006      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800244c:	bf00      	nop
 800244e:	e004      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002450:	bf00      	nop
 8002452:	e002      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002460:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246c:	4923      	ldr	r1, [pc, #140]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800246e:	4313      	orrs	r3, r2
 8002470:	654b      	str	r3, [r1, #84]	@ 0x54
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03f      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002488:	2b50      	cmp	r3, #80	@ 0x50
 800248a:	d022      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800248c:	2b50      	cmp	r3, #80	@ 0x50
 800248e:	d81d      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002490:	2b40      	cmp	r3, #64	@ 0x40
 8002492:	d020      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002494:	2b40      	cmp	r3, #64	@ 0x40
 8002496:	d819      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002498:	2b30      	cmp	r3, #48	@ 0x30
 800249a:	d01e      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800249c:	2b30      	cmp	r3, #48	@ 0x30
 800249e:	d815      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d00c      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d811      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d018      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d10d      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80024bc:	e010      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80024ca:	e009      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
        break;
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 80024de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024f2:	4902      	ldr	r1, [pc, #8]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	658b      	str	r3, [r1, #88]	@ 0x58
 80024f8:	e004      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80024fa:	bf00      	nop
 80024fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d034      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002514:	2b05      	cmp	r3, #5
 8002516:	d81d      	bhi.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	0800255b 	.word	0x0800255b
 8002524:	08002539 	.word	0x08002539
 8002528:	08002547 	.word	0x08002547
 800252c:	0800255b 	.word	0x0800255b
 8002530:	0800255b 	.word	0x0800255b
 8002534:	0800255b 	.word	0x0800255b
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002538:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	4a68      	ldr	r2, [pc, #416]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002542:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8002544:	e00a      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002546:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002550:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8002552:	e003      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
        break;
 8002558:	e000      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 800255a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002562:	4b5f      	ldr	r3, [pc, #380]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256e:	495c      	ldr	r1, [pc, #368]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002570:	4313      	orrs	r3, r2
 8002572:	654b      	str	r3, [r1, #84]	@ 0x54
 8002574:	e001      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d033      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	2b05      	cmp	r3, #5
 800258c:	d81c      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800258e:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025cf 	.word	0x080025cf
 8002598:	080025ad 	.word	0x080025ad
 800259c:	080025bb 	.word	0x080025bb
 80025a0:	080025cf 	.word	0x080025cf
 80025a4:	080025cf 	.word	0x080025cf
 80025a8:	080025cf 	.word	0x080025cf
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80025ac:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	4a4b      	ldr	r2, [pc, #300]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80025b8:	e00a      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	4a48      	ldr	r2, [pc, #288]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80025c6:	e003      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
        break;
 80025cc:	e000      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 80025ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80025d6:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	493f      	ldr	r1, [pc, #252]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	650b      	str	r3, [r1, #80]	@ 0x50
 80025e8:	e001      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d027      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002608:	d80c      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8002622:	e003      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
        break;
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800262a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8002632:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4928      	ldr	r1, [pc, #160]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002640:	4313      	orrs	r3, r2
 8002642:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002644:	e001      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	da2c      	bge.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002656:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800265a:	d017      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800265c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002660:	d811      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8002662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002666:	d011      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266c:	d80b      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8002672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002682:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
        break;
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 800268c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 8002694:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002698:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026a0:	490f      	ldr	r1, [pc, #60]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80026a6:	e001      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026c6:	4906      	ldr	r1, [pc, #24]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	58024400 	.word	0x58024400

080026e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e042      	b.n	800277c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe f853 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2224      	movs	r2, #36	@ 0x24
 8002712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fbbe 	bl	8002eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f825 	bl	8002784 <UART_SetConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01b      	b.n	800277c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fc3d 	bl	8002ff4 <UART_CheckIdleState>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b08c      	sub	sp, #48	@ 0x30
 800278a:	af00      	add	r7, sp, #0
 800278c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	431a      	orrs	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4bb3      	ldr	r3, [pc, #716]	@ (8002a80 <UART_SetConfig+0x2fc>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027bc:	430b      	orrs	r3, r1
 80027be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4aa8      	ldr	r2, [pc, #672]	@ (8002a84 <UART_SetConfig+0x300>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ec:	4313      	orrs	r3, r2
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	4ba4      	ldr	r3, [pc, #656]	@ (8002a88 <UART_SetConfig+0x304>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002800:	430b      	orrs	r3, r1
 8002802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	f023 010f 	bic.w	r1, r3, #15
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a8c <UART_SetConfig+0x308>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d131      	bne.n	8002888 <UART_SetConfig+0x104>
 8002824:	4b9a      	ldr	r3, [pc, #616]	@ (8002a90 <UART_SetConfig+0x30c>)
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	2b05      	cmp	r3, #5
 800282e:	d827      	bhi.n	8002880 <UART_SetConfig+0xfc>
 8002830:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <UART_SetConfig+0xb4>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002851 	.word	0x08002851
 800283c:	08002859 	.word	0x08002859
 8002840:	08002861 	.word	0x08002861
 8002844:	08002869 	.word	0x08002869
 8002848:	08002871 	.word	0x08002871
 800284c:	08002879 	.word	0x08002879
 8002850:	2301      	movs	r3, #1
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002856:	e0a0      	b.n	800299a <UART_SetConfig+0x216>
 8002858:	2304      	movs	r3, #4
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285e:	e09c      	b.n	800299a <UART_SetConfig+0x216>
 8002860:	2308      	movs	r3, #8
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002866:	e098      	b.n	800299a <UART_SetConfig+0x216>
 8002868:	2310      	movs	r3, #16
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286e:	e094      	b.n	800299a <UART_SetConfig+0x216>
 8002870:	2320      	movs	r3, #32
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002876:	e090      	b.n	800299a <UART_SetConfig+0x216>
 8002878:	2340      	movs	r3, #64	@ 0x40
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800287e:	e08c      	b.n	800299a <UART_SetConfig+0x216>
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002886:	e088      	b.n	800299a <UART_SetConfig+0x216>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a81      	ldr	r2, [pc, #516]	@ (8002a94 <UART_SetConfig+0x310>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d018      	beq.n	80028c4 <UART_SetConfig+0x140>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a80      	ldr	r2, [pc, #512]	@ (8002a98 <UART_SetConfig+0x314>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <UART_SetConfig+0x140>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7e      	ldr	r2, [pc, #504]	@ (8002a9c <UART_SetConfig+0x318>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00e      	beq.n	80028c4 <UART_SetConfig+0x140>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa0 <UART_SetConfig+0x31c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d009      	beq.n	80028c4 <UART_SetConfig+0x140>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa4 <UART_SetConfig+0x320>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <UART_SetConfig+0x140>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	@ (8002aa8 <UART_SetConfig+0x324>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d131      	bne.n	8002928 <UART_SetConfig+0x1a4>
 80028c4:	4b72      	ldr	r3, [pc, #456]	@ (8002a90 <UART_SetConfig+0x30c>)
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d827      	bhi.n	8002920 <UART_SetConfig+0x19c>
 80028d0:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <UART_SetConfig+0x154>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028f1 	.word	0x080028f1
 80028dc:	080028f9 	.word	0x080028f9
 80028e0:	08002901 	.word	0x08002901
 80028e4:	08002909 	.word	0x08002909
 80028e8:	08002911 	.word	0x08002911
 80028ec:	08002919 	.word	0x08002919
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028f6:	e016      	b.n	8002926 <UART_SetConfig+0x1a2>
 80028f8:	2304      	movs	r3, #4
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028fe:	e012      	b.n	8002926 <UART_SetConfig+0x1a2>
 8002900:	2308      	movs	r3, #8
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002906:	e00e      	b.n	8002926 <UART_SetConfig+0x1a2>
 8002908:	2310      	movs	r3, #16
 800290a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800290e:	e00a      	b.n	8002926 <UART_SetConfig+0x1a2>
 8002910:	2320      	movs	r3, #32
 8002912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002916:	e006      	b.n	8002926 <UART_SetConfig+0x1a2>
 8002918:	2340      	movs	r3, #64	@ 0x40
 800291a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800291e:	e002      	b.n	8002926 <UART_SetConfig+0x1a2>
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002926:	e038      	b.n	800299a <UART_SetConfig+0x216>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a55      	ldr	r2, [pc, #340]	@ (8002a84 <UART_SetConfig+0x300>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d130      	bne.n	8002994 <UART_SetConfig+0x210>
 8002932:	4b57      	ldr	r3, [pc, #348]	@ (8002a90 <UART_SetConfig+0x30c>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	2b05      	cmp	r3, #5
 800293c:	d826      	bhi.n	800298c <UART_SetConfig+0x208>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <UART_SetConfig+0x1c0>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002965 	.word	0x08002965
 800294c:	0800296d 	.word	0x0800296d
 8002950:	08002975 	.word	0x08002975
 8002954:	0800297d 	.word	0x0800297d
 8002958:	08002985 	.word	0x08002985
 800295c:	2302      	movs	r3, #2
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002962:	e01a      	b.n	800299a <UART_SetConfig+0x216>
 8002964:	2304      	movs	r3, #4
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800296a:	e016      	b.n	800299a <UART_SetConfig+0x216>
 800296c:	2308      	movs	r3, #8
 800296e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002972:	e012      	b.n	800299a <UART_SetConfig+0x216>
 8002974:	2310      	movs	r3, #16
 8002976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800297a:	e00e      	b.n	800299a <UART_SetConfig+0x216>
 800297c:	2320      	movs	r3, #32
 800297e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002982:	e00a      	b.n	800299a <UART_SetConfig+0x216>
 8002984:	2340      	movs	r3, #64	@ 0x40
 8002986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800298a:	e006      	b.n	800299a <UART_SetConfig+0x216>
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002992:	e002      	b.n	800299a <UART_SetConfig+0x216>
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a39      	ldr	r2, [pc, #228]	@ (8002a84 <UART_SetConfig+0x300>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	f040 80fe 	bne.w	8002ba2 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	dc48      	bgt.n	8002a40 <UART_SetConfig+0x2bc>
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	f2c0 8088 	blt.w	8002ac4 <UART_SetConfig+0x340>
 80029b4:	3b02      	subs	r3, #2
 80029b6:	2b1e      	cmp	r3, #30
 80029b8:	f200 8084 	bhi.w	8002ac4 <UART_SetConfig+0x340>
 80029bc:	a201      	add	r2, pc, #4	@ (adr r2, 80029c4 <UART_SetConfig+0x240>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	08002a57 	.word	0x08002a57
 80029c8:	08002ac5 	.word	0x08002ac5
 80029cc:	08002a47 	.word	0x08002a47
 80029d0:	08002ac5 	.word	0x08002ac5
 80029d4:	08002ac5 	.word	0x08002ac5
 80029d8:	08002ac5 	.word	0x08002ac5
 80029dc:	08002a4f 	.word	0x08002a4f
 80029e0:	08002ac5 	.word	0x08002ac5
 80029e4:	08002ac5 	.word	0x08002ac5
 80029e8:	08002ac5 	.word	0x08002ac5
 80029ec:	08002ac5 	.word	0x08002ac5
 80029f0:	08002ac5 	.word	0x08002ac5
 80029f4:	08002ac5 	.word	0x08002ac5
 80029f8:	08002ac5 	.word	0x08002ac5
 80029fc:	08002a5f 	.word	0x08002a5f
 8002a00:	08002ac5 	.word	0x08002ac5
 8002a04:	08002ac5 	.word	0x08002ac5
 8002a08:	08002ac5 	.word	0x08002ac5
 8002a0c:	08002ac5 	.word	0x08002ac5
 8002a10:	08002ac5 	.word	0x08002ac5
 8002a14:	08002ac5 	.word	0x08002ac5
 8002a18:	08002ac5 	.word	0x08002ac5
 8002a1c:	08002ac5 	.word	0x08002ac5
 8002a20:	08002ac5 	.word	0x08002ac5
 8002a24:	08002ac5 	.word	0x08002ac5
 8002a28:	08002ac5 	.word	0x08002ac5
 8002a2c:	08002ac5 	.word	0x08002ac5
 8002a30:	08002ac5 	.word	0x08002ac5
 8002a34:	08002ac5 	.word	0x08002ac5
 8002a38:	08002ac5 	.word	0x08002ac5
 8002a3c:	08002ab7 	.word	0x08002ab7
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	d03b      	beq.n	8002abc <UART_SetConfig+0x338>
 8002a44:	e03e      	b.n	8002ac4 <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8002a46:	f7fe fe11 	bl	800166c <HAL_RCC_GetPLL2QFreq>
 8002a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a4c:	e040      	b.n	8002ad0 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8002a4e:	f7fe fe23 	bl	8001698 <HAL_RCC_GetPLL3QFreq>
 8002a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a54:	e03c      	b.n	8002ad0 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 8002a56:	f7fe fded 	bl	8001634 <HAL_RCC_GetPCLK4Freq>
 8002a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a5c:	e038      	b.n	8002ad0 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <UART_SetConfig+0x30c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <UART_SetConfig+0x30c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	4a0d      	ldr	r2, [pc, #52]	@ (8002aac <UART_SetConfig+0x328>)
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a7c:	e028      	b.n	8002ad0 <UART_SetConfig+0x34c>
 8002a7e:	bf00      	nop
 8002a80:	cfff69f3 	.word	0xcfff69f3
 8002a84:	58000c00 	.word	0x58000c00
 8002a88:	11fff4ff 	.word	0x11fff4ff
 8002a8c:	42001000 	.word	0x42001000
 8002a90:	58024400 	.word	0x58024400
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	40004c00 	.word	0x40004c00
 8002aa0:	40005000 	.word	0x40005000
 8002aa4:	40007800 	.word	0x40007800
 8002aa8:	40007c00 	.word	0x40007c00
 8002aac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8002ab0:	4b99      	ldr	r3, [pc, #612]	@ (8002d18 <UART_SetConfig+0x594>)
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ab4:	e00c      	b.n	8002ad0 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8002ab6:	4b99      	ldr	r3, [pc, #612]	@ (8002d1c <UART_SetConfig+0x598>)
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002aba:	e009      	b.n	8002ad0 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ac2:	e005      	b.n	8002ad0 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ace:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 81ce 	beq.w	8002e74 <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	4a90      	ldr	r2, [pc, #576]	@ (8002d20 <UART_SetConfig+0x59c>)
 8002ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d305      	bcc.n	8002b08 <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d903      	bls.n	8002b10 <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b0e:	e1b1      	b.n	8002e74 <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	2200      	movs	r2, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	60fa      	str	r2, [r7, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	4a80      	ldr	r2, [pc, #512]	@ (8002d20 <UART_SetConfig+0x59c>)
 8002b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b32:	f7fd fbdd 	bl	80002f0 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	020b      	lsls	r3, r1, #8
 8002b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b4c:	0202      	lsls	r2, r0, #8
 8002b4e:	6979      	ldr	r1, [r7, #20]
 8002b50:	6849      	ldr	r1, [r1, #4]
 8002b52:	0849      	lsrs	r1, r1, #1
 8002b54:	2000      	movs	r0, #0
 8002b56:	460c      	mov	r4, r1
 8002b58:	4605      	mov	r5, r0
 8002b5a:	eb12 0804 	adds.w	r8, r2, r4
 8002b5e:	eb43 0905 	adc.w	r9, r3, r5
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4693      	mov	fp, r2
 8002b6c:	4652      	mov	r2, sl
 8002b6e:	465b      	mov	r3, fp
 8002b70:	4640      	mov	r0, r8
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd fbbc 	bl	80002f0 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b86:	d308      	bcc.n	8002b9a <UART_SetConfig+0x416>
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8e:	d204      	bcs.n	8002b9a <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e16c      	b.n	8002e74 <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ba0:	e168      	b.n	8002e74 <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002baa:	f040 80bd 	bne.w	8002d28 <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 8002bae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	dc48      	bgt.n	8002c48 <UART_SetConfig+0x4c4>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db73      	blt.n	8002ca2 <UART_SetConfig+0x51e>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d871      	bhi.n	8002ca2 <UART_SetConfig+0x51e>
 8002bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <UART_SetConfig+0x440>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002c4f 	.word	0x08002c4f
 8002bc8:	08002c57 	.word	0x08002c57
 8002bcc:	08002ca3 	.word	0x08002ca3
 8002bd0:	08002ca3 	.word	0x08002ca3
 8002bd4:	08002c5f 	.word	0x08002c5f
 8002bd8:	08002ca3 	.word	0x08002ca3
 8002bdc:	08002ca3 	.word	0x08002ca3
 8002be0:	08002ca3 	.word	0x08002ca3
 8002be4:	08002c67 	.word	0x08002c67
 8002be8:	08002ca3 	.word	0x08002ca3
 8002bec:	08002ca3 	.word	0x08002ca3
 8002bf0:	08002ca3 	.word	0x08002ca3
 8002bf4:	08002ca3 	.word	0x08002ca3
 8002bf8:	08002ca3 	.word	0x08002ca3
 8002bfc:	08002ca3 	.word	0x08002ca3
 8002c00:	08002ca3 	.word	0x08002ca3
 8002c04:	08002c6f 	.word	0x08002c6f
 8002c08:	08002ca3 	.word	0x08002ca3
 8002c0c:	08002ca3 	.word	0x08002ca3
 8002c10:	08002ca3 	.word	0x08002ca3
 8002c14:	08002ca3 	.word	0x08002ca3
 8002c18:	08002ca3 	.word	0x08002ca3
 8002c1c:	08002ca3 	.word	0x08002ca3
 8002c20:	08002ca3 	.word	0x08002ca3
 8002c24:	08002ca3 	.word	0x08002ca3
 8002c28:	08002ca3 	.word	0x08002ca3
 8002c2c:	08002ca3 	.word	0x08002ca3
 8002c30:	08002ca3 	.word	0x08002ca3
 8002c34:	08002ca3 	.word	0x08002ca3
 8002c38:	08002ca3 	.word	0x08002ca3
 8002c3c:	08002ca3 	.word	0x08002ca3
 8002c40:	08002ca3 	.word	0x08002ca3
 8002c44:	08002c95 	.word	0x08002c95
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d026      	beq.n	8002c9a <UART_SetConfig+0x516>
 8002c4c:	e029      	b.n	8002ca2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c4e:	f7fe fcb9 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8002c52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c54:	e02b      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c56:	f7fe fcd1 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8002c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c5c:	e027      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8002c5e:	f7fe fd05 	bl	800166c <HAL_RCC_GetPLL2QFreq>
 8002c62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c64:	e023      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8002c66:	f7fe fd17 	bl	8001698 <HAL_RCC_GetPLL3QFreq>
 8002c6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c6c:	e01f      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <UART_SetConfig+0x5a0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d24 <UART_SetConfig+0x5a0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <UART_SetConfig+0x594>)
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c8c:	e00f      	b.n	8002cae <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <UART_SetConfig+0x594>)
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c92:	e00c      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8002c94:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <UART_SetConfig+0x598>)
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c98:	e009      	b.n	8002cae <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ca0:	e005      	b.n	8002cae <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80df 	beq.w	8002e74 <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <UART_SetConfig+0x59c>)
 8002cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	441a      	add	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	d916      	bls.n	8002d10 <UART_SetConfig+0x58c>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d212      	bcs.n	8002d10 <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f023 030f 	bic.w	r3, r3, #15
 8002cf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	8bfb      	ldrh	r3, [r7, #30]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	8bfa      	ldrh	r2, [r7, #30]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	e0b1      	b.n	8002e74 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d16:	e0ad      	b.n	8002e74 <UART_SetConfig+0x6f0>
 8002d18:	03d09000 	.word	0x03d09000
 8002d1c:	003d0900 	.word	0x003d0900
 8002d20:	08003570 	.word	0x08003570
 8002d24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	dc49      	bgt.n	8002dc4 <UART_SetConfig+0x640>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db74      	blt.n	8002e1e <UART_SetConfig+0x69a>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d872      	bhi.n	8002e1e <UART_SetConfig+0x69a>
 8002d38:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <UART_SetConfig+0x5bc>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002dcb 	.word	0x08002dcb
 8002d44:	08002dd3 	.word	0x08002dd3
 8002d48:	08002e1f 	.word	0x08002e1f
 8002d4c:	08002e1f 	.word	0x08002e1f
 8002d50:	08002ddb 	.word	0x08002ddb
 8002d54:	08002e1f 	.word	0x08002e1f
 8002d58:	08002e1f 	.word	0x08002e1f
 8002d5c:	08002e1f 	.word	0x08002e1f
 8002d60:	08002de3 	.word	0x08002de3
 8002d64:	08002e1f 	.word	0x08002e1f
 8002d68:	08002e1f 	.word	0x08002e1f
 8002d6c:	08002e1f 	.word	0x08002e1f
 8002d70:	08002e1f 	.word	0x08002e1f
 8002d74:	08002e1f 	.word	0x08002e1f
 8002d78:	08002e1f 	.word	0x08002e1f
 8002d7c:	08002e1f 	.word	0x08002e1f
 8002d80:	08002deb 	.word	0x08002deb
 8002d84:	08002e1f 	.word	0x08002e1f
 8002d88:	08002e1f 	.word	0x08002e1f
 8002d8c:	08002e1f 	.word	0x08002e1f
 8002d90:	08002e1f 	.word	0x08002e1f
 8002d94:	08002e1f 	.word	0x08002e1f
 8002d98:	08002e1f 	.word	0x08002e1f
 8002d9c:	08002e1f 	.word	0x08002e1f
 8002da0:	08002e1f 	.word	0x08002e1f
 8002da4:	08002e1f 	.word	0x08002e1f
 8002da8:	08002e1f 	.word	0x08002e1f
 8002dac:	08002e1f 	.word	0x08002e1f
 8002db0:	08002e1f 	.word	0x08002e1f
 8002db4:	08002e1f 	.word	0x08002e1f
 8002db8:	08002e1f 	.word	0x08002e1f
 8002dbc:	08002e1f 	.word	0x08002e1f
 8002dc0:	08002e11 	.word	0x08002e11
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d026      	beq.n	8002e16 <UART_SetConfig+0x692>
 8002dc8:	e029      	b.n	8002e1e <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dca:	f7fe fbfb 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8002dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dd0:	e02b      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd2:	f7fe fc13 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8002dd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dd8:	e027      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8002dda:	f7fe fc47 	bl	800166c <HAL_RCC_GetPLL2QFreq>
 8002dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002de0:	e023      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8002de2:	f7fe fc59 	bl	8001698 <HAL_RCC_GetPLL3QFreq>
 8002de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002de8:	e01f      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <UART_SetConfig+0x71c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002df6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <UART_SetConfig+0x71c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	08db      	lsrs	r3, r3, #3
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <UART_SetConfig+0x720>)
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e08:	e00f      	b.n	8002e2a <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 8002e0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <UART_SetConfig+0x720>)
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e0e:	e00c      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <UART_SetConfig+0x724>)
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e14:	e009      	b.n	8002e2a <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e1c:	e005      	b.n	8002e2a <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e28:	bf00      	nop
    }

    if (pclk != 0U)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d021      	beq.n	8002e74 <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <UART_SetConfig+0x728>)
 8002e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	441a      	add	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d909      	bls.n	8002e6e <UART_SetConfig+0x6ea>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d205      	bcs.n	8002e6e <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e002      	b.n	8002e74 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3730      	adds	r7, #48	@ 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	03d09000 	.word	0x03d09000
 8002ea8:	003d0900 	.word	0x003d0900
 8002eac:	08003570 	.word	0x08003570

08002eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fae:	d10a      	bne.n	8002fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b098      	sub	sp, #96	@ 0x60
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003004:	f7fd fe48 	bl	8000c98 <HAL_GetTick>
 8003008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d12f      	bne.n	8003078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003020:	2200      	movs	r2, #0
 8003022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f88e 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d022      	beq.n	8003078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003046:	653b      	str	r3, [r7, #80]	@ 0x50
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44
 8003052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800305e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e063      	b.n	8003140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d149      	bne.n	800311a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f857 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03c      	beq.n	800311a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	623b      	str	r3, [r7, #32]
   return(result);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030be:	633b      	str	r3, [r7, #48]	@ 0x30
 80030c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e6      	bne.n	80030a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3308      	adds	r3, #8
 80030d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3308      	adds	r3, #8
 80030f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f2:	61fa      	str	r2, [r7, #28]
 80030f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e5      	bne.n	80030d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e012      	b.n	8003140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3758      	adds	r7, #88	@ 0x58
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003158:	e04f      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d04b      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fd fd99 	bl	8000c98 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <UART_WaitOnFlagUntilTimeout+0x30>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e04e      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d037      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	d034      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d031      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d110      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2208      	movs	r2, #8
 80031aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f839 	bl	8003224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2208      	movs	r2, #8
 80031b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e029      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d4:	d111      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f81f 	bl	8003224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e00f      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d0a0      	beq.n	800315a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b095      	sub	sp, #84	@ 0x54
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
 800324c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e6      	bne.n	800322c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	61fb      	str	r3, [r7, #28]
   return(result);
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <UART_EndRxTransfer+0xc8>)
 8003272:	4013      	ands	r3, r2
 8003274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3308      	adds	r3, #8
 800327c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800327e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e5      	bne.n	800325e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d118      	bne.n	80032cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e6      	bne.n	800329a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032e0:	bf00      	nop
 80032e2:	3754      	adds	r7, #84	@ 0x54
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	effffffe 	.word	0xeffffffe

080032f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UARTEx_DisableFifoMode+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e027      	b.n	8003356 <HAL_UARTEx_DisableFifoMode+0x66>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	@ 0x24
 8003312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003376:	2302      	movs	r3, #2
 8003378:	e02d      	b.n	80033d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2224      	movs	r2, #36	@ 0x24
 8003386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f850 	bl	800345c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e02d      	b.n	8003452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	@ 0x24
 8003402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f812 	bl	800345c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800347c:	e031      	b.n	80034e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800347e:	2310      	movs	r3, #16
 8003480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003482:	2310      	movs	r3, #16
 8003484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	0e5b      	lsrs	r3, r3, #25
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	0f5b      	lsrs	r3, r3, #29
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
 80034a8:	7b3a      	ldrb	r2, [r7, #12]
 80034aa:	4911      	ldr	r1, [pc, #68]	@ (80034f0 <UARTEx_SetNbDataToProcess+0x94>)
 80034ac:	5c8a      	ldrb	r2, [r1, r2]
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034b2:	7b3a      	ldrb	r2, [r7, #12]
 80034b4:	490f      	ldr	r1, [pc, #60]	@ (80034f4 <UARTEx_SetNbDataToProcess+0x98>)
 80034b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	7b7a      	ldrb	r2, [r7, #13]
 80034c8:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <UARTEx_SetNbDataToProcess+0x94>)
 80034ca:	5c8a      	ldrb	r2, [r1, r2]
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034d0:	7b7a      	ldrb	r2, [r7, #13]
 80034d2:	4908      	ldr	r1, [pc, #32]	@ (80034f4 <UARTEx_SetNbDataToProcess+0x98>)
 80034d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	08003588 	.word	0x08003588
 80034f4:	08003590 	.word	0x08003590

080034f8 <memset>:
 80034f8:	4402      	add	r2, r0
 80034fa:	4603      	mov	r3, r0
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d100      	bne.n	8003502 <memset+0xa>
 8003500:	4770      	bx	lr
 8003502:	f803 1b01 	strb.w	r1, [r3], #1
 8003506:	e7f9      	b.n	80034fc <memset+0x4>

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	@ (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	@ (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	@ (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	@ (800354c <__libc_init_array+0x44>)
 800351c:	f000 f818 	bl	8003550 <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	080035a0 	.word	0x080035a0
 8003544:	080035a0 	.word	0x080035a0
 8003548:	080035a0 	.word	0x080035a0
 800354c:	080035a4 	.word	0x080035a4

08003550 <_init>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	bf00      	nop
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr

0800355c <_fini>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr
